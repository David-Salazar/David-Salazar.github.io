---
title: Statistical Rethinking Week 8
author: ''
date: '2020-05-29'
slug: statistical-rethinking-week-8
categories: []
tags: []
aliases: 
  - ../../2020/05/29/statistical-rethinking-week-8/
---

```{r message=FALSE, warning=FALSE, include=FALSE}
library(tidyverse)
library(rethinking)
library(ggridges)
# rstan stuff
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
Sys.setenv(LOCAL_CPPFLAGS = '-march=corei7 -mtune=corei7')
# set seed
set.seed(50)
# set theme
theme_set(hrbrthemes::theme_ipsum_rc())
```

# Statistical Rethinking Week 8

This week was our first introduction to Multilevel models. Models where we explicitly model a family of parameters as coming from a common distribution: with each sample, we simultaneously learn each parameter and the parameters of the common distribution. **This process of sharing information is called pooling. The end result is shrinkage: each parameter gets pulled towards the estimated mean of the common distribution.** I tried my best to understand this process and result by simulating in [this post](https://david-salazar.github.io/2020/05/28/simulating-into-understanding-multilevel-models/) 

# Homework

# 1st Problem

Revisit the Reed frog survival data, data(reedfrogs), and add the predation and size treatment variables to the varying intercepts model. Consider models with either predictor alone, both predictors, as well as a model including their interaction. What do you infer about the causal influence of these predictor variables? Also focus on the inferred variation across tanks (the $\sigma$ across tanks). Explain why it changes
as it does across models with different predictors included.

```{r}
data("reedfrogs")
glimpse(reedfrogs)
```

## Model with only predation

Let's check how the predation variable is encoded:

```{r}
reedfrogs %>% 
  count(pred)
```

```{r}
reedfrogs %>% 
  mutate(predation_int = factor(pred),
         predation_int = as.integer(predation_int) - 1) -> reedfrogs
reedfrogs %>% 
  count(predation_int, pred)
```

Now, let's propose the model with varying intercept for tanks and taking into account whether there were predators or not. 

```{r}

reedfrogs$tank <- 1:nrow(reedfrogs)

data_only_predation <- list(
  S = reedfrogs$surv,
  N = reedfrogs$density,
  tank = reedfrogs$tank,
  predators = reedfrogs$predation_int
)

model_only_predators <- ulam(
  alist(
    S ~ dbinom(N, p),
    logit(p) <- a_bar + a[tank]*sigma + predators * pred, # non-center prior for a[tank]
    # priors
    a[tank] ~ dnorm(0, 1),
    pred ~ dnorm(0, 0.5),
    # hyper priors
    a_bar ~ dnorm(0, 1.5),
    sigma ~ dhalfnorm(0, 1)
  ),
  chains = 4, cores = 4, log_lik = TRUE, data = data_only_predation,
  iter = 2000
)
```


Let's check the posterior and the Rhat values:

```{r}
precis(model_only_predators, depth = 2) %>% 
  data.frame() %>% 
  select(Rhat4) %>% 
  summary()
```

The $\hat{R}$ values look good enough, all are close to 0. There appear to not be signs of transient like behavior. 

```{r}
precis(model_only_predators)
```

As expected, tanks with predators have, on average, lower log odds of probability of surviving. 

## Model with only size

Let's prepare size to the model:

```{r}
reedfrogs %>% 
  count(size)
```

```{r}
reedfrogs %>% 
  mutate(size_int = as.integer( factor(size)) - 1,
         size_int = as.integer(size_int)) -> reedfrogs
reedfrogs %>% 
  count(size_int, size)
```

Now, let's add the size to our model with varying intercepts:

```{r}
data_only_size <- list(
  S = reedfrogs$surv,
  N = reedfrogs$density,
  tank = reedfrogs$tank,
  size_i = reedfrogs$size_int
)

model_only_size <- ulam(
  alist(
    S ~ dbinom(N, p),
    logit(p) <- a_bar + a[tank]*sigma + s * size_i, # non-center prior for a[tank]
    # priors
    a[tank] ~ dnorm(0, 1),
    s ~ dnorm(0, 0.5),
    # hyper priors
    a_bar ~ dnorm(0, 1.5),
    sigma ~ dhalfnorm(0, 1)
  ),
  chains = 4, cores = 4, log_lik = TRUE, data = data_only_size,
  iter = 2000
)
```


Let's check our $\hat{R}$ values:

```{r}
precis(model_only_size, depth = 2) %>% 
  data.frame() %>% 
  select(Rhat4) %>% 
  summary()
```

Let's check our precis ouptut:

```{r}
precis(model_only_size)
```

It seems that the size is not that relevant in the log-odds scale. Its 89% PI covers zero and a prety wide interval. 

## Model with size and predators

Let's include both variables:

```{r}
data_both <- list(
  S = reedfrogs$surv,
  N = reedfrogs$density,
  tank = reedfrogs$tank,
  size_i = reedfrogs$size_int,
  predators = reedfrogs$predation_int
)

model_both <- ulam(
  alist(
    S ~ dbinom(N, p),
    logit(p) <- a_bar + a[tank]*sigma + s * size_i + predators * pred, # non-center prior for a[tank]
    # priors
    a[tank] ~ dnorm(0, 1),
    s ~ dnorm(0, 0.5),
    pred ~ dnorm(0, 0.5),
    # hyper priors
    a_bar ~ dnorm(0, 1.5),
    sigma ~ dhalfnorm(0, 1)
  ),
  chains = 4, cores = 4, log_lik = TRUE, data = data_both,
  iter = 2000
)
```


Let's check our $\hat{R}$ values:

```{r}
precis(model_both, depth = 2) %>% 
  data.frame() %>% 
  select(Rhat4) %>% 
  summary()
```

The $\hat{R}$ values look OK. Let's check the `precis` output:

```{r}
precis(model_both)
```
Predators' effect is still large and negative on the log-odds scale. Also, size's effect has shifted and, once we have statistically adjusted by the presence of predators, now has most of its posterior mass to the right of zero. Presumably, this arises because size and the presence of predators are related; unless we adjust by the presence of predators, the coefficient for size will pick up some of the predators' effect. 

## Model with an interaction 


```{r}
model_interaction <- ulam(
  alist(
    S ~ dbinom(N, p),
    logit(p) <- a_bar + a[tank]*sigma + s * size_i + predators * pred + # non-center prior for a[tank]
      predators * size_i * interaction,
    # priors
    a[tank] ~ dnorm(0, 1),
    s ~ dnorm(0, 0.5),
    pred ~ dnorm(0, 0.5),
    interaction ~ dnorm(0, 0.25),
    # hyper priors
    a_bar ~ dnorm(0, 1.5),
    sigma ~ dhalfnorm(0, 1)
  ),
  chains = 4, cores = 4, log_lik = TRUE, data = data_both,
  iter = 2000
)
```
. 

Let's check on the $\hat{R}$ values:

```{r}
precis(model_interaction, depth = 2) %>% 
  data.frame() %>% 
  select(Rhat4) %>% 
  summary()
```

The $\hat{R}$ values look OK. Let's check the `precis` output:

```{r}
precis(model_interaction)
```

Prediction is still large and negative on the log-odds scale. Size also does not appear to change much with the interaction. The interaction has a large standard error and most of its mass lies largely symmetric around zero.

Now it's the turn to check how the estimated variation of tanks has changed with the different models:

```{r message=FALSE, warning=FALSE, fig.width=8}
only_predation <- extract.samples(model_only_predators)$sigma
only_size <- extract.samples(model_only_size)$sigma
both_variables <- extract.samples(model_both)$sigma
variables_interacted <- extract.samples(model_interaction)$sigma

data.frame(sim =1:4000, only_predation, only_size, both_variables, variables_interacted) %>% 
  pivot_longer(-sim, names_to = "model", values_to = "sigma") %>% 
  mutate(predators_present = if_else(model == "only_size", FALSE, TRUE)) %>% 
  ggplot(aes(sigma, model, fill = predators_present)) +
  geom_density_ridges() +
  scale_fill_viridis_d() +
  theme(legend.position = "bottom") +
  labs(title = "Predicted variation across tanks",
       subtitle = "Presence of predators explains some of the variation across tanks.")
ggsave("predators.png")
```

All the models that include predators have almost identical estimates for the variation across tanks. That is, the presence of predators explain some of the variation across tanks. 

Finally, let's compare the models according to information criteria:

```{r}
compare(model_only_predators, model_only_size, model_both, model_interaction)
```

According to information criteria, all of the models make essentially have the same expected predictive performance out-of-sample. 

# 2nd problem

2. In 1980, a typical Bengali woman could have 5 or more children in her lifetime. By the year 2000, a typical Bengali woman had only 2 or 3. Youâ€™re going to look at a historical set of data, when contraception was widely available but many families chose not to use it. These data reside in data(bangladesh) and come from the 1988 Bangladesh Fertility Survey. Each row is one of 1934 women. There are six variables, but you can focus on two of them for this practice problem:

1. district
1. use.contraception

```{r}
data("bangladesh")
glimpse(bangladesh)
```

Let's fix the district:

```{r}
bangladesh %>% 
  mutate(district_id = as.integer( as.factor(district) ) ) -> bangladesh
```

> Now, focus on predicting use.contraception, clustered by district_id. Fit both (1) a traditional fixed-effects model that uses an index variable for district and (2) a multilevel model with varying intercepts for district.

## Traditional fixed-effects

```{r}
data_bangladesh <- list(
  contraception = bangladesh$use.contraception,
  d_id = bangladesh$district_id
)

model_fixed_effects <- ulam(
  alist(
    contraception ~ dbinom(1, p),
    logit(p) <- d[d_id],
    d[d_id] ~ dnorm(0, 1.5)
  ),
  chains = 4, cores = 4, log_lik = TRUE,
  data = data_bangladesh
)
```

Let's check the $\hat{R}$ values:

```{r}
precis(model_fixed_effects, depth = 2) %>% 
  data.frame() %>% 
  select(Rhat4) %>% 
  summary()
```

The $\hat{R}$ values look OK. Let's fit the multilevel model:

```{r}
model_multilevel <- ulam(
  alist(
    contraception ~ dbinom(1, p),
    logit(p) <- alpha + d[d_id]*sigma, # non-centered version
    d[d_id] ~ dnorm(0, 1),
    alpha ~ dnorm(0, 1),
    sigma ~ dhalfnorm(0, 1)
  ),
  chains = 4, cores = 4, log_lik = TRUE,
  data = data_bangladesh
)
```


Let's check on the $\hat{R}$ values:

```{r}
precis(model_multilevel, depth = 2) %>% 
  data.frame() %>% 
  select(Rhat4) %>% 
  summary()
```

The $\hat{R}$ values look OK. 

Now let's inspect the values for the distribution of varying intercepts for each district:

```{r}
precis(model_multilevel)
```

The overall use of contraceptives seems unlikely across districts, thus the negative alpha.

> Plot the predicted proportions of women in each district using contraception, for both the fixed-effects
model and the varying-effects model.

Notice that each women, within a same district, has the same prediction. 

```{r}
# fixed effects
link_fixed_effects <- link(model_fixed_effects) # probs
fixed_effects_prop_per_district <- unique( apply((link_fixed_effects), 2, mean)) #average over posterior
# multilevel
link_multilevel <- link(model_multilevel)
multilevel_prop_per_district <- unique( apply((link_multilevel), 2, mean)) # average over posterior
```

Let's average over the posterior the alpha of the distribution of varying intercepts per district

```{r}
grand_average <- mean( inv_logit(extract.samples(model_multilevel)$alpha) )
```

Let's plot the requested graph:

```{r fig.height=5.8}
data.frame(district_id = 1:60, fixed_effects = fixed_effects_prop_per_district, multilevel = multilevel_prop_per_district) %>% 
  pivot_longer(-district_id, names_to = "method", values_to = "predicted_proportion") %>% 
  left_join(bangladesh) %>% 
  ggplot(aes(district_id, predicted_proportion, color = method)) +
  geom_point() +
  geom_hline(aes(yintercept = grand_average), linetype = 2, color = "red") +
  scale_color_viridis_d() +
  theme(legend.position = "bottom") +
  scale_y_continuous(labels = scales::percent) +
  labs(title = "Estimated proportion of Contraceptive usage per district",
       subtitle = "Shrinkage in action",
       y = "Estimated proportion of contraceptive usage ")
ggsave("district.png")
```

We are seeing the consequences of pooling information from the common distribution of districts: each district's prediction is overall much closer to the estimated common distribution's mean than the predictions from the fixed effects model. Therefore, each yellow point is closer to the red line than its corresponding purple point. There are a couple of districts where the difference in predictions between the two models is huge. This are the places where most outside information was used. From what we've known about Pooling, these must be the places that were most likely to overfit and had fewer data points. Let's confirm this intuition:

```{r}
bangladesh %>% 
  count(district_id) %>% 
  left_join(data.frame(district_id = 1:60, fixed_effects = fixed_effects_prop_per_district, multilevel = multilevel_prop_per_district)) %>% 
  mutate(absolute_difference = abs(fixed_effects - multilevel)) %>% 
  ggplot(aes(n, absolute_difference)) +
  geom_point() +
  geom_smooth(se = FALSE) +
  labs(title = "Difference in predictions per district vs Sample size in district",
       subtitle = "Largest differences were present in districts with very small sample sizes.",
       y = "Absolute difference in prediction")
ggsave("errors_ban.png")
```

Finally, let's compare their expected out of sample performance:

```{r}
compare(model_fixed_effects, model_multilevel)
```

# 3rd Problem

Return to the Trolley data, data(Trolley), from Chapter 12. Define and fit a varying intercepts model for these data. By this I mean to add an intercept parameter for the individual to the linear model. Cluster the varying intercepts on individual
participants, as indicated by the unique values in the id variable. Include action, intention, and contact as before.

```{r}
data("Trolley")
trolley_data <- Trolley 
glimpse(trolley_data)
```

Therefore, we will run an ordered logistic model where Action, Intention and Contact interact between each other. 

```{r}
# data 
data_list_model <- list(
  R = trolley_data$response,
  action = trolley_data$action,
  intention = trolley_data$intention,
  contact = trolley_data$contact
)
# model

model_no_varying <- ulam(
  alist(
    R ~ ordered_logistic(phi, kappa),
    phi <-  bA*action + BI*intention + bC*contact,
    BI <- bI + bIC*contact + bIA*action,
    kappa ~ normal(0, 0.5),
    c(bA, bC, bI, bIA, bIC) ~ normal(0, 0.5)
),
  data = data_list_model,
chains = 4, cores = 4, log_lik = TRUE
)
```


Let's check our $\hat{R}$ values:

```{r}
precis(model_no_varying) %>% 
  data.frame() %>% 
  select(Rhat4) %>% 
  summary()
```

The $\hat{R}$ values look good enough. 

```{r}
precis(model_no_varying)
```

Now, let's fit the model with varying intercepts by individual:

```{r}
# data 
data_list_model <- list(
  R = trolley_data$response,
  action = trolley_data$action,
  intention = trolley_data$intention,
  contact = trolley_data$contact,
  individual = coerce_index(trolley_data$id)
)
# model

model_varying <- ulam(
  alist(
    R ~ ordered_logistic(phi, kappa),
    phi <- a[individual] +  bA*action + BI*intention + bC*contact,
    BI <- bI + bIC*contact + bIA*action,
    # priors
    a[individual] ~ normal(0, sigma),
    kappa ~ normal(0, 1.5),
    c(bA, bC, bI, bIA, bIC) ~ normal(0, 0.5),
    # hyper-prior
    sigma ~ dhalfnorm(0, 1.5)
),
  data = data_list_model,
chains = 4, cores = 4, log_lik = TRUE,
iter = 1500
)
```

Let's check the $\hat{R}$ values:

```{r}
precis(model_varying, depth = 2) %>% 
  as_tibble() %>% 
  select(Rhat4) %>% 
  summary()
```

They look OK. 

> Compare the varying intercepts model and a model that ignores individuals, using both WAIC/LOO and posterior predictions.

```{r}
precis(model_varying)
```

We estimate the sigma to be very large, indicating lots of variations in the responses among the individuals. Once we control for this average response per individual, we can estimate all the other parameters much more easily. 

```{r}
compare(model_no_varying, model_varying)
```

It seems that the expected performance out of sample, for the model with varying intercepts, is a lot better than the expected for the model with no varying intercept. 










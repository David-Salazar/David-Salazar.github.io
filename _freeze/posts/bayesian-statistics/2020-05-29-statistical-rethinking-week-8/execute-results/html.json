{
  "hash": "b5ae01ad7c9e0bcf52a2c23a39552582",
  "result": {
    "markdown": "---\ntitle: Statistical Rethinking Week 8\nauthor: ''\ndate: '2020-05-29'\nslug: statistical-rethinking-week-8\ncategories: []\ntags: []\n---\n\n\n\n\n# Statistical Rethinking Week 8\n\nThis week was our first introduction to Multilevel models. Models where we explicitly model a family of parameters as coming from a common distribution: with each sample, we simultaneously learn each parameter and the parameters of the common distribution. **This process of sharing information is called pooling. The end result is shrinkage: each parameter gets pulled towards the estimated mean of the common distribution.** I tried my best to understand this process and result by simulating in [this post](https://david-salazar.github.io/2020/05/28/simulating-into-understanding-multilevel-models/) \n\n# Homework\n\n# 1st Problem\n\nRevisit the Reed frog survival data, data(reedfrogs), and add the predation and size treatment variables to the varying intercepts model. Consider models with either predictor alone, both predictors, as well as a model including their interaction. What do you infer about the causal influence of these predictor variables? Also focus on the inferred variation across tanks (the $\\sigma$ across tanks). Explain why it changes\nas it does across models with different predictors included.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nRows: 48\nColumns: 5\n$ density  <int> 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1…\n$ pred     <fct> no, no, no, no, no, no, no, no, pred, pred, pred, pred, pred,…\n$ size     <fct> big, big, big, big, small, small, small, small, big, big, big…\n$ surv     <int> 9, 10, 7, 10, 9, 9, 10, 9, 4, 9, 7, 6, 7, 5, 9, 9, 24, 23, 22…\n$ propsurv <dbl> 0.90, 1.00, 0.70, 1.00, 0.90, 0.90, 1.00, 0.90, 0.40, 0.90, 0…\n```\n:::\n:::\n\n\n## Model with only predation\n\nLet's check how the predation variable is encoded:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n  pred  n\n1   no 24\n2 pred 24\n```\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n  predation_int pred  n\n1             0   no 24\n2             1 pred 24\n```\n:::\n:::\n\n\nNow, let's propose the model with varying intercept for tanks and taking into account whether there were predators or not. \n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 parallel chains, with 1 thread(s) per chain...\n\nChain 1 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 1 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 1 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 1 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 2 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 2 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 2 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 2 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 2 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 3 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 3 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 3 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 3 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 3 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 3 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 3 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 4 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 4 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 4 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 4 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 4 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 4 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 4 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 1 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 1 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 1 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 1 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 1 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 1 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 2 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 2 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 2 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 3 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 3 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 3 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 4 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 4 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 4 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 1 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 1 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 1 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 2 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 2 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 2 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 3 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 3 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 3 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 4 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 4 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 4 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 1 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 2 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 2 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 3 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 4 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 4 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 1 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 1 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 1 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 2 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 2 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 2 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 3 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 3 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 3 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 4 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 1 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 2 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 3 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 3 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 4 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 1 finished in 0.8 seconds.\nChain 2 finished in 0.7 seconds.\nChain 3 finished in 0.8 seconds.\nChain 4 finished in 0.7 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.7 seconds.\nTotal execution time: 0.9 seconds.\n```\n:::\n:::\n\n\n\nLet's check the posterior and the Rhat values:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n     Rhat4       \n Min.   :0.9992  \n 1st Qu.:0.9994  \n Median :0.9996  \n Mean   :0.9998  \n 3rd Qu.:0.9998  \n Max.   :1.0028  \n```\n:::\n:::\n\n\nThe $\\hat{R}$ values look good enough, all are close to 0. There appear to not be signs of transient like behavior. \n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n            mean        sd      5.5%     94.5%    n_eff    Rhat4\npred  -1.8222334 0.2997461 -2.280908 -1.312238 1410.822 1.001462\na_bar  2.1963295 0.2296880  1.814582  2.555532 1922.014 1.001507\nsigma  0.9106572 0.1645364  0.675735  1.189860 1139.664 1.002823\n```\n:::\n:::\n\n\nAs expected, tanks with predators have, on average, lower log odds of probability of surviving. \n\n## Model with only size\n\nLet's prepare size to the model:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n   size  n\n1   big 24\n2 small 24\n```\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n  size_int  size  n\n1        0   big 24\n2        1 small 24\n```\n:::\n:::\n\n\nNow, let's add the size to our model with varying intercepts:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 parallel chains, with 1 thread(s) per chain...\n\nChain 1 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 1 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 1 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 1 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 1 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 2 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 2 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 2 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 3 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 3 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 3 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 3 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 4 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 4 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 4 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 1 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 1 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 1 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 2 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 2 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 2 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 3 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 3 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 3 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 3 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 4 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 4 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 4 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 4 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 1 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 1 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 2 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 2 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 3 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 3 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 4 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 4 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 4 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 1 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 1 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 2 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 2 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 3 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 3 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 3 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 4 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 4 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 1 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 1 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 2 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 2 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 3 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 4 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 4 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 1 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 1 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 2 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 2 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 3 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 3 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 3 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 4 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 1 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 1 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 2 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 2 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 2 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 3 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 3 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 4 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 1 finished in 0.8 seconds.\nChain 2 finished in 0.8 seconds.\nChain 3 finished in 0.8 seconds.\nChain 4 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 4 finished in 0.8 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.8 seconds.\nTotal execution time: 1.0 seconds.\n```\n:::\n:::\n\n\n\nLet's check our $\\hat{R}$ values:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n     Rhat4       \n Min.   :0.9992  \n 1st Qu.:0.9995  \n Median :0.9999  \n Mean   :1.0001  \n 3rd Qu.:1.0004  \n Max.   :1.0027  \n```\n:::\n:::\n\n\nLet's check our precis ouptut:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n           mean        sd       5.5%     94.5%    n_eff    Rhat4\ns     0.2621837 0.3559195 -0.3168585 0.8315286 1557.368 1.002716\na_bar 1.2242716 0.3072198  0.7418783 1.7224410 1090.394 1.000859\nsigma 1.5785150 0.1997810  1.2827567 1.9168341 1338.498 1.002117\n```\n:::\n:::\n\n\nIt seems that the size is not that relevant in the log-odds scale. Its 89% PI covers zero and a prety wide interval. \n\n## Model with size and predators\n\nLet's include both variables:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 parallel chains, with 1 thread(s) per chain...\n\nChain 1 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 1 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 2 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 2 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 3 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 3 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 3 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 4 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 4 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 4 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 1 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 1 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 1 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 2 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 2 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 2 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 3 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 3 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 3 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 4 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 4 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 1 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 1 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 2 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 2 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 3 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 3 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 3 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 4 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 4 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 4 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 1 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 1 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 2 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 2 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 3 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 4 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 4 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 1 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 1 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 2 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 2 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 3 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 3 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 3 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 4 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 4 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 4 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 1 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 1 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 2 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 2 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 3 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 4 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 1 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 1 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 2 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 2 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 2 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 3 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 3 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 3 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 4 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 4 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 1 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 1 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 1 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 2 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 3 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 3 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 4 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 1 finished in 0.9 seconds.\nChain 2 finished in 0.9 seconds.\nChain 3 finished in 0.9 seconds.\nChain 4 finished in 0.8 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.9 seconds.\nTotal execution time: 1.0 seconds.\n```\n:::\n:::\n\n\n\nLet's check our $\\hat{R}$ values:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n     Rhat4       \n Min.   :0.9991  \n 1st Qu.:0.9994  \n Median :0.9996  \n Mean   :0.9998  \n 3rd Qu.:1.0000  \n Max.   :1.0015  \n```\n:::\n:::\n\n\nThe $\\hat{R}$ values look OK. Let's check the `precis` output:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n            mean        sd        5.5%      94.5%    n_eff     Rhat4\ns      0.3802925 0.2658079 -0.04409109  0.7974136 2220.168 1.0014675\npred  -1.8502836 0.2942538 -2.29862435 -1.3587384 1648.664 1.0011477\na_bar  2.0230849 0.2598151  1.59480645  2.4302732 2075.647 0.9995557\nsigma  0.8718928 0.1674364  0.62479505  1.1597191 1044.173 1.0009064\n```\n:::\n:::\n\nPredators' effect is still large and negative on the log-odds scale. Also, size's effect has shifted and, once we have statistically adjusted by the presence of predators, now has most of its posterior mass to the right of zero. Presumably, this arises because size and the presence of predators are related; unless we adjust by the presence of predators, the coefficient for size will pick up some of the predators' effect. \n\n## Model with an interaction \n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 parallel chains, with 1 thread(s) per chain...\n\nChain 1 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 1 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 1 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 2 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 3 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 3 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 4 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 4 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 1 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 1 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 2 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 2 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 2 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 3 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 3 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 3 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 4 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 4 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 4 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 1 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 1 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 2 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 3 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 3 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 4 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 4 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 1 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 1 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 2 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 2 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 2 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 3 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 3 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 3 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 4 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 4 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 4 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 1 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 1 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 2 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 3 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 4 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 1 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 1 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 2 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 2 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 2 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 3 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 3 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 4 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 4 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 4 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 1 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 1 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 2 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 3 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 3 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 4 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 1 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 1 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 2 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 2 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 3 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 3 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 4 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 1 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 2 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 2 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 3 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 3 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 4 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 1 finished in 1.0 seconds.\nChain 2 finished in 1.0 seconds.\nChain 3 finished in 1.0 seconds.\nChain 4 finished in 0.9 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 1.0 seconds.\nTotal execution time: 1.1 seconds.\n```\n:::\n:::\n\n. \n\nLet's check on the $\\hat{R}$ values:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n     Rhat4       \n Min.   :0.9991  \n 1st Qu.:0.9995  \n Median :0.9997  \n Mean   :0.9999  \n 3rd Qu.:1.0000  \n Max.   :1.0020  \n```\n:::\n:::\n\n\nThe $\\hat{R}$ values look OK. Let's check the `precis` output:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n                   mean        sd        5.5%      94.5%    n_eff     Rhat4\ns            0.39027815 0.2917359 -0.06399788  0.8527317 2805.604 0.9998481\npred        -1.86693961 0.3037439 -2.32497935 -1.3481036 1942.572 1.0012481\ninteraction -0.01565226 0.2231252 -0.37841780  0.3360543 4759.155 0.9993405\na_bar        2.02130251 0.2554671  1.61979835  2.4199170 2432.114 1.0007998\nsigma        0.86186357 0.1669389  0.61695795  1.1412422 1423.359 1.0019521\n```\n:::\n:::\n\n\nPrediction is still large and negative on the log-odds scale. Size also does not appear to change much with the interaction. The interaction has a large standard error and most of its mass lies largely symmetric around zero.\n\nNow it's the turn to check how the estimated variation of tanks has changed with the different models:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](2020-05-29-statistical-rethinking-week-8_files/figure-html/unnamed-chunk-19-1.png){width=768}\n:::\n:::\n\n\nAll the models that include predators have almost identical estimates for the variation across tanks. That is, the presence of predators explain some of the variation across tanks. \n\nFinally, let's compare the models according to information criteria:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n                         WAIC       SE     dWAIC       dSE    pWAIC    weight\nmodel_both           199.0788 7.927714 0.0000000        NA 19.19389 0.3594406\nmodel_only_predators 199.5214 8.146360 0.4425911 1.5345879 19.53953 0.2880844\nmodel_interaction    200.3865 7.898739 1.3076555 0.5588874 19.65161 0.1869276\nmodel_only_size      200.6294 7.227683 1.5505815 3.9940200 21.08975 0.1655475\n```\n:::\n:::\n\n\nAccording to information criteria, all of the models make essentially have the same expected predictive performance out-of-sample. \n\n# 2nd problem\n\n2. In 1980, a typical Bengali woman could have 5 or more children in her lifetime. By the year 2000, a typical Bengali woman had only 2 or 3. You’re going to look at a historical set of data, when contraception was widely available but many families chose not to use it. These data reside in data(bangladesh) and come from the 1988 Bangladesh Fertility Survey. Each row is one of 1934 women. There are six variables, but you can focus on two of them for this practice problem:\n\n1. district\n1. use.contraception\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,934\nColumns: 6\n$ woman             <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1…\n$ district          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ use.contraception <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1…\n$ living.children   <int> 4, 1, 3, 4, 1, 1, 4, 4, 2, 4, 1, 1, 2, 4, 4, 4, 1, 4…\n$ age.centered      <dbl> 18.4400, -5.5599, 1.4400, 8.4400, -13.5590, -11.5600…\n$ urban             <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n```\n:::\n:::\n\n\nLet's fix the district:\n\n\n::: {.cell}\n\n:::\n\n\n> Now, focus on predicting use.contraception, clustered by district_id. Fit both (1) a traditional fixed-effects model that uses an index variable for district and (2) a multilevel model with varying intercepts for district.\n\n## Traditional fixed-effects\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 parallel chains, with 1 thread(s) per chain...\n\nChain 1 Iteration:   1 / 1000 [  0%]  (Warmup) \nChain 2 Iteration:   1 / 1000 [  0%]  (Warmup) \nChain 3 Iteration:   1 / 1000 [  0%]  (Warmup) \nChain 4 Iteration:   1 / 1000 [  0%]  (Warmup) \nChain 1 Iteration: 100 / 1000 [ 10%]  (Warmup) \nChain 2 Iteration: 100 / 1000 [ 10%]  (Warmup) \nChain 3 Iteration: 100 / 1000 [ 10%]  (Warmup) \nChain 4 Iteration: 100 / 1000 [ 10%]  (Warmup) \nChain 1 Iteration: 200 / 1000 [ 20%]  (Warmup) \nChain 2 Iteration: 200 / 1000 [ 20%]  (Warmup) \nChain 4 Iteration: 200 / 1000 [ 20%]  (Warmup) \nChain 3 Iteration: 200 / 1000 [ 20%]  (Warmup) \nChain 1 Iteration: 300 / 1000 [ 30%]  (Warmup) \nChain 2 Iteration: 300 / 1000 [ 30%]  (Warmup) \nChain 4 Iteration: 300 / 1000 [ 30%]  (Warmup) \nChain 3 Iteration: 300 / 1000 [ 30%]  (Warmup) \nChain 2 Iteration: 400 / 1000 [ 40%]  (Warmup) \nChain 1 Iteration: 400 / 1000 [ 40%]  (Warmup) \nChain 4 Iteration: 400 / 1000 [ 40%]  (Warmup) \nChain 3 Iteration: 400 / 1000 [ 40%]  (Warmup) \nChain 2 Iteration: 500 / 1000 [ 50%]  (Warmup) \nChain 2 Iteration: 501 / 1000 [ 50%]  (Sampling) \nChain 1 Iteration: 500 / 1000 [ 50%]  (Warmup) \nChain 1 Iteration: 501 / 1000 [ 50%]  (Sampling) \nChain 4 Iteration: 500 / 1000 [ 50%]  (Warmup) \nChain 4 Iteration: 501 / 1000 [ 50%]  (Sampling) \nChain 3 Iteration: 500 / 1000 [ 50%]  (Warmup) \nChain 3 Iteration: 501 / 1000 [ 50%]  (Sampling) \nChain 1 Iteration: 600 / 1000 [ 60%]  (Sampling) \nChain 2 Iteration: 600 / 1000 [ 60%]  (Sampling) \nChain 4 Iteration: 600 / 1000 [ 60%]  (Sampling) \nChain 3 Iteration: 600 / 1000 [ 60%]  (Sampling) \nChain 1 Iteration: 700 / 1000 [ 70%]  (Sampling) \nChain 2 Iteration: 700 / 1000 [ 70%]  (Sampling) \nChain 3 Iteration: 700 / 1000 [ 70%]  (Sampling) \nChain 4 Iteration: 700 / 1000 [ 70%]  (Sampling) \nChain 1 Iteration: 800 / 1000 [ 80%]  (Sampling) \nChain 2 Iteration: 800 / 1000 [ 80%]  (Sampling) \nChain 4 Iteration: 800 / 1000 [ 80%]  (Sampling) \nChain 3 Iteration: 800 / 1000 [ 80%]  (Sampling) \nChain 2 Iteration: 900 / 1000 [ 90%]  (Sampling) \nChain 1 Iteration: 900 / 1000 [ 90%]  (Sampling) \nChain 4 Iteration: 900 / 1000 [ 90%]  (Sampling) \nChain 3 Iteration: 900 / 1000 [ 90%]  (Sampling) \nChain 1 Iteration: 1000 / 1000 [100%]  (Sampling) \nChain 2 Iteration: 1000 / 1000 [100%]  (Sampling) \nChain 4 Iteration: 1000 / 1000 [100%]  (Sampling) \nChain 1 finished in 4.3 seconds.\nChain 2 finished in 4.2 seconds.\nChain 4 finished in 4.2 seconds.\nChain 3 Iteration: 1000 / 1000 [100%]  (Sampling) \nChain 3 finished in 4.3 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 4.2 seconds.\nTotal execution time: 4.4 seconds.\n```\n:::\n:::\n\n\nLet's check the $\\hat{R}$ values:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n     Rhat4       \n Min.   :0.9981  \n 1st Qu.:0.9985  \n Median :0.9986  \n Mean   :0.9987  \n 3rd Qu.:0.9988  \n Max.   :1.0003  \n```\n:::\n:::\n\n\nThe $\\hat{R}$ values look OK. Let's fit the multilevel model:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 parallel chains, with 1 thread(s) per chain...\n\nChain 1 Iteration:   1 / 1000 [  0%]  (Warmup) \nChain 2 Iteration:   1 / 1000 [  0%]  (Warmup) \nChain 3 Iteration:   1 / 1000 [  0%]  (Warmup) \nChain 4 Iteration:   1 / 1000 [  0%]  (Warmup) \nChain 2 Iteration: 100 / 1000 [ 10%]  (Warmup) \nChain 4 Iteration: 100 / 1000 [ 10%]  (Warmup) \nChain 1 Iteration: 100 / 1000 [ 10%]  (Warmup) \nChain 3 Iteration: 100 / 1000 [ 10%]  (Warmup) \nChain 2 Iteration: 200 / 1000 [ 20%]  (Warmup) \nChain 4 Iteration: 200 / 1000 [ 20%]  (Warmup) \nChain 1 Iteration: 200 / 1000 [ 20%]  (Warmup) \nChain 3 Iteration: 200 / 1000 [ 20%]  (Warmup) \nChain 1 Iteration: 300 / 1000 [ 30%]  (Warmup) \nChain 2 Iteration: 300 / 1000 [ 30%]  (Warmup) \nChain 4 Iteration: 300 / 1000 [ 30%]  (Warmup) \nChain 3 Iteration: 300 / 1000 [ 30%]  (Warmup) \nChain 1 Iteration: 400 / 1000 [ 40%]  (Warmup) \nChain 2 Iteration: 400 / 1000 [ 40%]  (Warmup) \nChain 4 Iteration: 400 / 1000 [ 40%]  (Warmup) \nChain 3 Iteration: 400 / 1000 [ 40%]  (Warmup) \nChain 1 Iteration: 500 / 1000 [ 50%]  (Warmup) \nChain 1 Iteration: 501 / 1000 [ 50%]  (Sampling) \nChain 2 Iteration: 500 / 1000 [ 50%]  (Warmup) \nChain 2 Iteration: 501 / 1000 [ 50%]  (Sampling) \nChain 4 Iteration: 500 / 1000 [ 50%]  (Warmup) \nChain 4 Iteration: 501 / 1000 [ 50%]  (Sampling) \nChain 3 Iteration: 500 / 1000 [ 50%]  (Warmup) \nChain 3 Iteration: 501 / 1000 [ 50%]  (Sampling) \nChain 1 Iteration: 600 / 1000 [ 60%]  (Sampling) \nChain 4 Iteration: 600 / 1000 [ 60%]  (Sampling) \nChain 2 Iteration: 600 / 1000 [ 60%]  (Sampling) \nChain 3 Iteration: 600 / 1000 [ 60%]  (Sampling) \nChain 1 Iteration: 700 / 1000 [ 70%]  (Sampling) \nChain 2 Iteration: 700 / 1000 [ 70%]  (Sampling) \nChain 4 Iteration: 700 / 1000 [ 70%]  (Sampling) \nChain 3 Iteration: 700 / 1000 [ 70%]  (Sampling) \nChain 1 Iteration: 800 / 1000 [ 80%]  (Sampling) \nChain 2 Iteration: 800 / 1000 [ 80%]  (Sampling) \nChain 4 Iteration: 800 / 1000 [ 80%]  (Sampling) \nChain 3 Iteration: 800 / 1000 [ 80%]  (Sampling) \nChain 1 Iteration: 900 / 1000 [ 90%]  (Sampling) \nChain 2 Iteration: 900 / 1000 [ 90%]  (Sampling) \nChain 4 Iteration: 900 / 1000 [ 90%]  (Sampling) \nChain 3 Iteration: 900 / 1000 [ 90%]  (Sampling) \nChain 1 Iteration: 1000 / 1000 [100%]  (Sampling) \nChain 2 Iteration: 1000 / 1000 [100%]  (Sampling) \nChain 1 finished in 5.9 seconds.\nChain 2 finished in 5.9 seconds.\nChain 4 Iteration: 1000 / 1000 [100%]  (Sampling) \nChain 4 finished in 5.9 seconds.\nChain 3 Iteration: 1000 / 1000 [100%]  (Sampling) \nChain 3 finished in 6.1 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 5.9 seconds.\nTotal execution time: 6.2 seconds.\n```\n:::\n:::\n\n\n\nLet's check on the $\\hat{R}$ values:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n     Rhat4       \n Min.   :0.9983  \n 1st Qu.:0.9991  \n Median :0.9997  \n Mean   :0.9999  \n 3rd Qu.:1.0002  \n Max.   :1.0049  \n```\n:::\n:::\n\n\nThe $\\hat{R}$ values look OK. \n\nNow let's inspect the values for the distribution of varying intercepts for each district:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n            mean         sd       5.5%      94.5%    n_eff    Rhat4\nalpha -0.5300451 0.09031838 -0.6757211 -0.3845637 725.4713 1.002841\nsigma  0.5155339 0.08471016  0.3923543  0.6590001 802.9495 1.002967\n```\n:::\n:::\n\n\nThe overall use of contraceptives seems unlikely across districts, thus the negative alpha.\n\n> Plot the predicted proportions of women in each district using contraception, for both the fixed-effects\nmodel and the varying-effects model.\n\nNotice that each women, within a same district, has the same prediction. \n\n\n::: {.cell}\n\n:::\n\n\nLet's average over the posterior the alpha of the distribution of varying intercepts per district\n\n\n::: {.cell}\n\n:::\n\n\nLet's plot the requested graph:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](2020-05-29-statistical-rethinking-week-8_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\nWe are seeing the consequences of pooling information from the common distribution of districts: each district's prediction is overall much closer to the estimated common distribution's mean than the predictions from the fixed effects model. Therefore, each yellow point is closer to the red line than its corresponding purple point. There are a couple of districts where the difference in predictions between the two models is huge. This are the places where most outside information was used. From what we've known about Pooling, these must be the places that were most likely to overfit and had fewer data points. Let's confirm this intuition:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](2020-05-29-statistical-rethinking-week-8_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\nFinally, let's compare their expected out of sample performance:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n                        WAIC       SE    dWAIC      dSE    pWAIC     weight\nmodel_multilevel    2515.105 24.92913 0.000000       NA 35.82908 0.98751026\nmodel_fixed_effects 2523.846 28.93510 8.740559 7.733149 53.90337 0.01248974\n```\n:::\n:::\n\n\n# 3rd Problem\n\nReturn to the Trolley data, data(Trolley), from Chapter 12. Define and fit a varying intercepts model for these data. By this I mean to add an intercept parameter for the individual to the linear model. Cluster the varying intercepts on individual\nparticipants, as indicated by the unique values in the id variable. Include action, intention, and contact as before.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nRows: 9,930\nColumns: 12\n$ case      <fct> cfaqu, cfbur, cfrub, cibox, cibur, cispe, fkaqu, fkboa, fkbo…\n$ response  <int> 4, 3, 4, 3, 3, 3, 5, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 3, …\n$ order     <int> 2, 31, 16, 32, 4, 9, 29, 12, 23, 22, 27, 19, 14, 3, 18, 15, …\n$ id        <fct> 96;434, 96;434, 96;434, 96;434, 96;434, 96;434, 96;434, 96;4…\n$ age       <int> 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, …\n$ male      <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ edu       <fct> Middle School, Middle School, Middle School, Middle School, …\n$ action    <int> 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, …\n$ intention <int> 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, …\n$ contact   <int> 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ story     <fct> aqu, bur, rub, box, bur, spe, aqu, boa, box, bur, car, spe, …\n$ action2   <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, …\n```\n:::\n:::\n\n\nTherefore, we will run an ordered logistic model where Action, Intention and Contact interact between each other. \n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 parallel chains, with 1 thread(s) per chain...\n\nChain 1 Iteration:   1 / 1000 [  0%]  (Warmup) \nChain 2 Iteration:   1 / 1000 [  0%]  (Warmup) \nChain 3 Iteration:   1 / 1000 [  0%]  (Warmup) \nChain 4 Iteration:   1 / 1000 [  0%]  (Warmup) \nChain 3 Iteration: 100 / 1000 [ 10%]  (Warmup) \nChain 4 Iteration: 100 / 1000 [ 10%]  (Warmup) \nChain 2 Iteration: 100 / 1000 [ 10%]  (Warmup) \nChain 1 Iteration: 100 / 1000 [ 10%]  (Warmup) \nChain 4 Iteration: 200 / 1000 [ 20%]  (Warmup) \nChain 2 Iteration: 200 / 1000 [ 20%]  (Warmup) \nChain 3 Iteration: 200 / 1000 [ 20%]  (Warmup) \nChain 4 Iteration: 300 / 1000 [ 30%]  (Warmup) \nChain 1 Iteration: 200 / 1000 [ 20%]  (Warmup) \nChain 2 Iteration: 300 / 1000 [ 30%]  (Warmup) \nChain 3 Iteration: 300 / 1000 [ 30%]  (Warmup) \nChain 4 Iteration: 400 / 1000 [ 40%]  (Warmup) \nChain 2 Iteration: 400 / 1000 [ 40%]  (Warmup) \nChain 3 Iteration: 400 / 1000 [ 40%]  (Warmup) \nChain 1 Iteration: 300 / 1000 [ 30%]  (Warmup) \nChain 4 Iteration: 500 / 1000 [ 50%]  (Warmup) \nChain 4 Iteration: 501 / 1000 [ 50%]  (Sampling) \nChain 3 Iteration: 500 / 1000 [ 50%]  (Warmup) \nChain 3 Iteration: 501 / 1000 [ 50%]  (Sampling) \nChain 2 Iteration: 500 / 1000 [ 50%]  (Warmup) \nChain 2 Iteration: 501 / 1000 [ 50%]  (Sampling) \nChain 1 Iteration: 400 / 1000 [ 40%]  (Warmup) \nChain 3 Iteration: 600 / 1000 [ 60%]  (Sampling) \nChain 4 Iteration: 600 / 1000 [ 60%]  (Sampling) \nChain 2 Iteration: 600 / 1000 [ 60%]  (Sampling) \nChain 1 Iteration: 500 / 1000 [ 50%]  (Warmup) \nChain 1 Iteration: 501 / 1000 [ 50%]  (Sampling) \nChain 3 Iteration: 700 / 1000 [ 70%]  (Sampling) \nChain 2 Iteration: 700 / 1000 [ 70%]  (Sampling) \nChain 4 Iteration: 700 / 1000 [ 70%]  (Sampling) \nChain 1 Iteration: 600 / 1000 [ 60%]  (Sampling) \nChain 3 Iteration: 800 / 1000 [ 80%]  (Sampling) \nChain 2 Iteration: 800 / 1000 [ 80%]  (Sampling) \nChain 4 Iteration: 800 / 1000 [ 80%]  (Sampling) \nChain 3 Iteration: 900 / 1000 [ 90%]  (Sampling) \nChain 1 Iteration: 700 / 1000 [ 70%]  (Sampling) \nChain 2 Iteration: 900 / 1000 [ 90%]  (Sampling) \nChain 3 Iteration: 1000 / 1000 [100%]  (Sampling) \nChain 3 finished in 238.1 seconds.\nChain 4 Iteration: 900 / 1000 [ 90%]  (Sampling) \nChain 1 Iteration: 800 / 1000 [ 80%]  (Sampling) \nChain 2 Iteration: 1000 / 1000 [100%]  (Sampling) \nChain 2 finished in 255.4 seconds.\nChain 4 Iteration: 1000 / 1000 [100%]  (Sampling) \nChain 4 finished in 265.2 seconds.\nChain 1 Iteration: 900 / 1000 [ 90%]  (Sampling) \nChain 1 Iteration: 1000 / 1000 [100%]  (Sampling) \nChain 1 finished in 285.3 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 261.0 seconds.\nTotal execution time: 285.6 seconds.\n```\n:::\n:::\n\n\n\nLet's check our $\\hat{R}$ values:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n     Rhat4      \n Min.   :1.001  \n 1st Qu.:1.001  \n Median :1.003  \n Mean   :1.002  \n 3rd Qu.:1.004  \n Max.   :1.004  \n```\n:::\n:::\n\n\nThe $\\hat{R}$ values look good enough. \n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n          mean         sd       5.5%      94.5%    n_eff    Rhat4\nbIC -1.2536887 0.09787824 -1.4078527 -1.0972498 916.6130 1.001050\nbIA -0.4588409 0.07976593 -0.5846241 -0.3308186 915.8706 1.002552\nbI  -0.2635621 0.05547950 -0.3539045 -0.1741581 851.2259 1.003748\nbC  -0.3155594 0.06895451 -0.4275243 -0.2047311 881.3079 1.000786\nbA  -0.4428254 0.05420215 -0.5289409 -0.3556129 798.8642 1.003789\n```\n:::\n:::\n\n\nNow, let's fit the model with varying intercepts by individual:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 parallel chains, with 1 thread(s) per chain...\n\nChain 1 Iteration:    1 / 1500 [  0%]  (Warmup) \nChain 2 Iteration:    1 / 1500 [  0%]  (Warmup) \nChain 3 Iteration:    1 / 1500 [  0%]  (Warmup) \nChain 4 Iteration:    1 / 1500 [  0%]  (Warmup) \nChain 3 Iteration:  100 / 1500 [  6%]  (Warmup) \nChain 4 Iteration:  100 / 1500 [  6%]  (Warmup) \nChain 1 Iteration:  100 / 1500 [  6%]  (Warmup) \nChain 2 Iteration:  100 / 1500 [  6%]  (Warmup) \nChain 3 Iteration:  200 / 1500 [ 13%]  (Warmup) \nChain 1 Iteration:  200 / 1500 [ 13%]  (Warmup) \nChain 4 Iteration:  200 / 1500 [ 13%]  (Warmup) \nChain 2 Iteration:  200 / 1500 [ 13%]  (Warmup) \nChain 3 Iteration:  300 / 1500 [ 20%]  (Warmup) \nChain 1 Iteration:  300 / 1500 [ 20%]  (Warmup) \nChain 4 Iteration:  300 / 1500 [ 20%]  (Warmup) \nChain 2 Iteration:  300 / 1500 [ 20%]  (Warmup) \nChain 3 Iteration:  400 / 1500 [ 26%]  (Warmup) \nChain 1 Iteration:  400 / 1500 [ 26%]  (Warmup) \nChain 4 Iteration:  400 / 1500 [ 26%]  (Warmup) \nChain 3 Iteration:  500 / 1500 [ 33%]  (Warmup) \nChain 2 Iteration:  400 / 1500 [ 26%]  (Warmup) \nChain 1 Iteration:  500 / 1500 [ 33%]  (Warmup) \nChain 4 Iteration:  500 / 1500 [ 33%]  (Warmup) \nChain 3 Iteration:  600 / 1500 [ 40%]  (Warmup) \nChain 1 Iteration:  600 / 1500 [ 40%]  (Warmup) \nChain 2 Iteration:  500 / 1500 [ 33%]  (Warmup) \nChain 4 Iteration:  600 / 1500 [ 40%]  (Warmup) \nChain 3 Iteration:  700 / 1500 [ 46%]  (Warmup) \nChain 1 Iteration:  700 / 1500 [ 46%]  (Warmup) \nChain 3 Iteration:  751 / 1500 [ 50%]  (Sampling) \nChain 4 Iteration:  700 / 1500 [ 46%]  (Warmup) \nChain 2 Iteration:  600 / 1500 [ 40%]  (Warmup) \nChain 4 Iteration:  751 / 1500 [ 50%]  (Sampling) \nChain 1 Iteration:  751 / 1500 [ 50%]  (Sampling) \nChain 3 Iteration:  850 / 1500 [ 56%]  (Sampling) \nChain 2 Iteration:  700 / 1500 [ 46%]  (Warmup) \nChain 4 Iteration:  850 / 1500 [ 56%]  (Sampling) \nChain 1 Iteration:  850 / 1500 [ 56%]  (Sampling) \nChain 3 Iteration:  950 / 1500 [ 63%]  (Sampling) \nChain 2 Iteration:  751 / 1500 [ 50%]  (Sampling) \nChain 4 Iteration:  950 / 1500 [ 63%]  (Sampling) \nChain 1 Iteration:  950 / 1500 [ 63%]  (Sampling) \nChain 3 Iteration: 1050 / 1500 [ 70%]  (Sampling) \nChain 4 Iteration: 1050 / 1500 [ 70%]  (Sampling) \nChain 1 Iteration: 1050 / 1500 [ 70%]  (Sampling) \nChain 3 Iteration: 1150 / 1500 [ 76%]  (Sampling) \nChain 2 Iteration:  850 / 1500 [ 56%]  (Sampling) \nChain 4 Iteration: 1150 / 1500 [ 76%]  (Sampling) \nChain 1 Iteration: 1150 / 1500 [ 76%]  (Sampling) \nChain 3 Iteration: 1250 / 1500 [ 83%]  (Sampling) \nChain 4 Iteration: 1250 / 1500 [ 83%]  (Sampling) \nChain 1 Iteration: 1250 / 1500 [ 83%]  (Sampling) \nChain 2 Iteration:  950 / 1500 [ 63%]  (Sampling) \nChain 3 Iteration: 1350 / 1500 [ 90%]  (Sampling) \nChain 4 Iteration: 1350 / 1500 [ 90%]  (Sampling) \nChain 1 Iteration: 1350 / 1500 [ 90%]  (Sampling) \nChain 3 Iteration: 1450 / 1500 [ 96%]  (Sampling) \nChain 3 Iteration: 1500 / 1500 [100%]  (Sampling) \nChain 3 finished in 755.1 seconds.\nChain 4 Iteration: 1450 / 1500 [ 96%]  (Sampling) \nChain 1 Iteration: 1450 / 1500 [ 96%]  (Sampling) \nChain 2 Iteration: 1050 / 1500 [ 70%]  (Sampling) \nChain 4 Iteration: 1500 / 1500 [100%]  (Sampling) \nChain 4 finished in 778.1 seconds.\nChain 1 Iteration: 1500 / 1500 [100%]  (Sampling) \nChain 1 finished in 779.8 seconds.\nChain 2 Iteration: 1150 / 1500 [ 76%]  (Sampling) \nChain 2 Iteration: 1250 / 1500 [ 83%]  (Sampling) \nChain 2 Iteration: 1350 / 1500 [ 90%]  (Sampling) \nChain 2 Iteration: 1450 / 1500 [ 96%]  (Sampling) \nChain 2 Iteration: 1500 / 1500 [100%]  (Sampling) \nChain 2 finished in 1003.1 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 829.0 seconds.\nTotal execution time: 1003.4 seconds.\n```\n:::\n:::\n\n\nLet's check the $\\hat{R}$ values:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n     Rhat4       \n Min.   :0.9989  \n 1st Qu.:0.9997  \n Median :1.0001  \n Mean   :1.0003  \n 3rd Qu.:1.0008  \n Max.   :1.0056  \n```\n:::\n:::\n\n\nThey look OK. \n\n> Compare the varying intercepts model and a model that ignores individuals, using both WAIC/LOO and posterior predictions.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n            mean         sd       5.5%      94.5%    n_eff    Rhat4\nbIC   -1.6683595 0.10067796 -1.8280428 -1.5044902 2041.316 1.001806\nbIA   -0.5603385 0.08092598 -0.6881210 -0.4302237 1751.210 1.000439\nbI    -0.3835373 0.05848220 -0.4764278 -0.2909250 1519.676 1.000894\nbC    -0.4521763 0.07003289 -0.5622873 -0.3377944 1938.544 1.002460\nbA    -0.6484359 0.05691941 -0.7385056 -0.5594558 1960.843 1.000483\nsigma  1.9175789 0.08277129  1.7891569  2.0527683 2816.559 1.000350\n```\n:::\n:::\n\n\nWe estimate the sigma to be very large, indicating lots of variations in the responses among the individuals. Once we control for this average response per individual, we can estimate all the other parameters much more easily. \n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n                     WAIC        SE    dWAIC      dSE     pWAIC weight\nmodel_varying    31057.66 179.39096    0.000       NA 356.31980      1\nmodel_no_varying 36930.02  79.88204 5872.354 173.3291  10.94063      0\n```\n:::\n:::\n\n\nIt seems that the expected performance out of sample, for the model with varying intercepts, is a lot better than the expected for the model with no varying intercept. \n\n\n\n\n\n\n\n\n\n",
    "supporting": [
      "2020-05-29-statistical-rethinking-week-8_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
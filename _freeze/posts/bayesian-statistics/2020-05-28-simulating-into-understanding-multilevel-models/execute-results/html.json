{
  "hash": "bc3e74f8d432babf29f63a0d8493890a",
  "result": {
    "markdown": "---\ntitle: Simulating into understanding Multilevel Models\nauthor: ''\ndate: '2020-05-28'\nslug: simulating-into-understanding-multilevel-models\ncategories: []\ntags: []\naliases: \n  - ../../2020/05/28/simulating-into-understanding-multilevel-models/\n---\n\n\n\n\n# Simulating into Understanding Multilevel Models\n\n> Pooling is the process and shrinkning is the result\n\nPooling and Shrinking are not easy concepts to understand. In the lectures, Richard, as always, does an excellent job of creating metaphors and examples to help us gain intuition around what Multilevel models do. **Multilevel models are models mnesic models.**\n\nImagine a cluster of observations: it can be different classrooms in a school. Pooling means using the information from other classrooms to inform our estimates for each classroom. A model with no pooling means that each classroom is the first classroom that we have ever seen, as other classrooms have no effect on our estimates. **No pooling models are amnesic models.**\n\nFinally, **shrinking is the result of this pooling: our estimates for each classroom will be pulled towards the global mean across classrooms**. But how do multilevel models do this?\n\n## Parameters come from a common distribution\n\nMultilevel models propose to model a family of parameters (the parameters for each classroom) as coming from a common statistical population parameters. For example, the family of varying intercepts for each classroom in the school. Then, **as we learn each parameter for each classroom, we learn simultaneously the family of the parameters for all classrooms; both processes complement each other**. Therefore, this distribution of the family of parameters will become an adaptive *regularizer* for our estimates: **they will shrink the varying intercepts for each classroom to the estimated mean of the common distribution; the amount of shrinkage will be determined by the variation that we estimate for the distribution of the family of parameters**. The more influenced parameters are going to be those that come from classrooms with small sample sizes.\n\nHowever, it is one thing to have some intuition and another one is to really *understand* something. When it comes to statistics, I am a big fan of simulation. Thankfully, Richard does precisely this in chapter 12. Let's simulate a model to visualize both **pooling and shrinking**.\n\n## The Model: A multilevel binomial\n\nWe simulate the number of students who passed some exam at different classrooms at one school. That is, each classroom has $S_i$ students who passed the test, from a maximum of $N_i$. The model then is the following:\n\n$$ S_i \\sim Binomial(N_i, p_i) $$\n\n$$ logit(p_i) = \\alpha_{classroom_{[i]}} $$\n\n$$ \\alpha_j \\sim Normal(\\bar{\\alpha}, \\sigma)$$\n\n$$ \\bar{\\alpha} \\sim Normal(0, 1.5) $$\n\n$$ \\sigma \\sim Exponential(1) $$\n\nThen, we posit a distribution for the average log-odds of passing the exam for each classroom: $\\alpha_j \\sim Normal(\\bar{\\alpha}, \\sigma)$. That is, the prior for each intercept will be one distribution that we will simultaneously learn as we learn the individual parameters. Finally, we have hyper-priors: priors for the parameters of the distribution of intercepts ($\\bar{\\alpha}, \\sigma$).\n\n## The simulation\n\nTo simulate this model, we will define the parameters of the distribution of intercepts. Then, for each classroom, we will simulate an average log-odds of passing the exam. Then, we will simulate the number of students at each classroom that passed the test. \n\nNotice that neither the hyper-priors nor the priors are part of our simulation. In Richard's words:\n\n> Priors are epistomology, not ontology.\n\nLet's begin by setting the parameters of the population of intercepts:\n\n\n::: {.cell}\n\n```{.r .cell-code}\na_bar <- 1.5\nsigma <- 1.5\nn_classrooms <- 60\n# students per classrom\nNi <- as.integer(rep(c(5, 10, 25, 35), each = 15))\n```\n:::\n\n\nThen, we simulate the average log-odds of passing the exam for each of the classrooms\n\n\n::: {.cell}\n\n```{.r .cell-code}\navg_lod_odds_per_classrom <- rnorm(n_classrooms, mean = a_bar, sd = sigma)\n```\n:::\n\n\nThen, we have the following:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_simulation <- data.frame(classroom = 1:n_classrooms, Ni = Ni, true_log_odds = avg_lod_odds_per_classrom)\nglimpse(data_simulation)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 60\nColumns: 3\n$ classroom     <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1…\n$ Ni            <int> 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 10,…\n$ true_log_odds <dbl> 2.3245048, 0.2375944, 1.5494969, 2.2862246, -1.0914062, …\n```\n:::\n:::\n\n\n### Simulate the survivors\n\n> Putting the logistic into the random binomial function, we can generate the number of students who passed the test for each classrom:\n\nRemember that the logistic is simply the inverse of the logit. Thus, by applying the logistic we go from the log-odds into the probability.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_simulation %>% \n  mutate(number_passed_test = rbinom(n_classrooms, prob = logistic(true_log_odds), size = Ni)) -> data_simulation\nglimpse(data_simulation)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 60\nColumns: 4\n$ classroom          <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, …\n$ Ni                 <int> 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10…\n$ true_log_odds      <dbl> 2.3245048, 0.2375944, 1.5494969, 2.2862246, -1.0914…\n$ number_passed_test <int> 5, 5, 4, 5, 1, 4, 5, 5, 5, 1, 5, 5, 3, 5, 5, 8, 8, …\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_simulation %>% \n  ggplot(aes(classroom, number_passed_test, color = Ni)) +\n  geom_point() +\n  scale_color_viridis_c() +\n  labs(title = \"Simulated students who passed the test per Classroom\",\n       color = \"Initial #\")\n```\n\n::: {.cell-output-display}\n![](2020-05-28-simulating-into-understanding-multilevel-models_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n### No-pooling estimates\n\nPooling means using the information from other classrooms to inform our predictions of estimated probabilities of passing the exams at different classrooms. **Therefore, no-pooling means treating each classroom as completely unrelated to others**. That is, estimating that the variance of the population of parameters is infinite. \n\nTherefore, our estimate of the probability of passing the test at each classroom will just be the raw sample proportion at each classrom:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_simulation %>% \n  mutate(estimated_probability_no_pooling = number_passed_test / Ni) -> data_simulation\nglimpse(data_simulation)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 60\nColumns: 5\n$ classroom                        <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12…\n$ Ni                               <int> 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5…\n$ true_log_odds                    <dbl> 2.3245048, 0.2375944, 1.5494969, 2.28…\n$ number_passed_test               <int> 5, 5, 4, 5, 1, 4, 5, 5, 5, 1, 5, 5, 3…\n$ estimated_probability_no_pooling <dbl> 1.0, 1.0, 0.8, 1.0, 0.2, 0.8, 1.0, 1.…\n```\n:::\n:::\n\n\n### Partial pooling estimates\n\nPartial pooling means to model explicitly the population of parameters. Then, with a mean and a standard deviation estimated, we can perform adaptive regularization, i.e., shrinkage to our predictions. To do so, we will fit a multilevel binomial model:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_model <- list(Si = data_simulation$number_passed_test, Ni = data_simulation$Ni, classroom = data_simulation$classroom)\n\nmultilevel_model <- alist(\n  Si ~ dbinom(Ni, p),\n  logit(p) <- a_classroom[classroom], # each pond get its own average log odds of survival\n  a_classroom[classroom] ~ dnorm(a_bar, sigma),\n  a_bar ~ dnorm(0, 1.5),\n  sigma ~ dexp(1)\n)\n```\n:::\n\n\nThen, we use HMC to sample from our posterior:\n\n\n::: {.cell hash='2020-05-28-simulating-into-understanding-multilevel-models_cache/html/unnamed-chunk-9_f2b644b4b9f6976020b17a36d140d0d9'}\n\n```{.r .cell-code}\nmultilevel_fit <- ulam(multilevel_model, data = data_model, chains = 4, cores = 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 parallel chains, with 1 thread(s) per chain...\n\nChain 1 Iteration:   1 / 1000 [  0%]  (Warmup) \nChain 1 Iteration: 100 / 1000 [ 10%]  (Warmup) \nChain 1 Iteration: 200 / 1000 [ 20%]  (Warmup) \nChain 1 Iteration: 300 / 1000 [ 30%]  (Warmup) \nChain 1 Iteration: 400 / 1000 [ 40%]  (Warmup) \nChain 1 Iteration: 500 / 1000 [ 50%]  (Warmup) \nChain 1 Iteration: 501 / 1000 [ 50%]  (Sampling) \nChain 1 Iteration: 600 / 1000 [ 60%]  (Sampling) \nChain 1 Iteration: 700 / 1000 [ 70%]  (Sampling) \nChain 2 Iteration:   1 / 1000 [  0%]  (Warmup) \nChain 2 Iteration: 100 / 1000 [ 10%]  (Warmup) \nChain 2 Iteration: 200 / 1000 [ 20%]  (Warmup) \nChain 2 Iteration: 300 / 1000 [ 30%]  (Warmup) \nChain 2 Iteration: 400 / 1000 [ 40%]  (Warmup) \nChain 2 Iteration: 500 / 1000 [ 50%]  (Warmup) \nChain 2 Iteration: 501 / 1000 [ 50%]  (Sampling) \nChain 2 Iteration: 600 / 1000 [ 60%]  (Sampling) \nChain 2 Iteration: 700 / 1000 [ 70%]  (Sampling) \nChain 2 Iteration: 800 / 1000 [ 80%]  (Sampling) \nChain 2 Iteration: 900 / 1000 [ 90%]  (Sampling) \nChain 3 Iteration:   1 / 1000 [  0%]  (Warmup) \nChain 3 Iteration: 100 / 1000 [ 10%]  (Warmup) \nChain 3 Iteration: 200 / 1000 [ 20%]  (Warmup) \nChain 3 Iteration: 300 / 1000 [ 30%]  (Warmup) \nChain 3 Iteration: 400 / 1000 [ 40%]  (Warmup) \nChain 3 Iteration: 500 / 1000 [ 50%]  (Warmup) \nChain 3 Iteration: 501 / 1000 [ 50%]  (Sampling) \nChain 3 Iteration: 600 / 1000 [ 60%]  (Sampling) \nChain 3 Iteration: 700 / 1000 [ 70%]  (Sampling) \nChain 3 Iteration: 800 / 1000 [ 80%]  (Sampling) \nChain 3 Iteration: 900 / 1000 [ 90%]  (Sampling) \nChain 3 Iteration: 1000 / 1000 [100%]  (Sampling) \nChain 4 Iteration:   1 / 1000 [  0%]  (Warmup) \nChain 4 Iteration: 100 / 1000 [ 10%]  (Warmup) \nChain 4 Iteration: 200 / 1000 [ 20%]  (Warmup) \nChain 4 Iteration: 300 / 1000 [ 30%]  (Warmup) \nChain 4 Iteration: 400 / 1000 [ 40%]  (Warmup) \nChain 4 Iteration: 500 / 1000 [ 50%]  (Warmup) \nChain 4 Iteration: 501 / 1000 [ 50%]  (Sampling) \nChain 4 Iteration: 600 / 1000 [ 60%]  (Sampling) \nChain 4 Iteration: 700 / 1000 [ 70%]  (Sampling) \nChain 4 Iteration: 800 / 1000 [ 80%]  (Sampling) \nChain 4 Iteration: 900 / 1000 [ 90%]  (Sampling) \nChain 4 Iteration: 1000 / 1000 [100%]  (Sampling) \nChain 1 Iteration: 800 / 1000 [ 80%]  (Sampling) \nChain 1 Iteration: 900 / 1000 [ 90%]  (Sampling) \nChain 1 Iteration: 1000 / 1000 [100%]  (Sampling) \nChain 1 finished in 0.2 seconds.\nChain 2 Iteration: 1000 / 1000 [100%]  (Sampling) \nChain 2 finished in 0.2 seconds.\nChain 3 finished in 0.2 seconds.\nChain 4 finished in 0.2 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.2 seconds.\nTotal execution time: 0.3 seconds.\n```\n:::\n:::\n\n\nLet's evaluate the validity of our Markov Chains:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntraceplot_ulam(multilevel_fit)\n```\n\n::: {.cell-output-display}\n![](2020-05-28-simulating-into-understanding-multilevel-models_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](2020-05-28-simulating-into-understanding-multilevel-models_files/figure-html/unnamed-chunk-10-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](2020-05-28-simulating-into-understanding-multilevel-models_files/figure-html/unnamed-chunk-10-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](2020-05-28-simulating-into-understanding-multilevel-models_files/figure-html/unnamed-chunk-10-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](2020-05-28-simulating-into-understanding-multilevel-models_files/figure-html/unnamed-chunk-10-5.png){width=672}\n:::\n:::\n\n\nThe chains look healthy because:\n\n1. They have good mixing across the parameter space.\n1. They are stationary.\n1. Different chains converge to explore the same spaces. \n\nNow, let's find out our estimated parameters:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprecis(multilevel_fit, depth = 2) %>% \n  data.frame() %>% \n  select(Rhat4) %>% \n  summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Rhat4       \n Min.   :0.9982  \n 1st Qu.:0.9988  \n Median :0.9993  \n Mean   :0.9995  \n 3rd Qu.:0.9998  \n Max.   :1.0021  \n```\n:::\n:::\n\nThe Rhat values look OK. That is, it seems that we sampled correctly from our posterior. Let's use these samples from the posterior distribution to calculate our estimated log-odds of survival for each pond.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nposterior_samples <- extract.samples(multilevel_fit)\nglimpse(posterior_samples)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 3\n $ a_classroom: num [1:2000, 1:60] 2.93 2.06 3.09 5.13 1.17 ...\n $ a_bar      : num [1:2000(1d)] 1.48 1.24 1.72 1.49 1.11 ...\n $ sigma      : num [1:2000(1d)] 1.62 1.8 1.42 2.04 1.45 ...\n - attr(*, \"source\")= chr \"ulam posterior: 2000 samples from object\"\n```\n:::\n:::\n\n\nBefore we calculate our estimated log-odds, let's check our estimates for the population of parameters from which each intercept comes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.frame(alpha_bar = posterior_samples$a_bar) %>% \n  ggplot(aes(alpha_bar)) +\n  geom_histogram(binwidth = 0.01, color = \"black\", fill = \"dodgerblue4\", alpha = 0.7) +\n  geom_vline(aes(xintercept = 1.5), linetype = 2, color = \"red\") +\n  labs(title = \"Posterior samples for population alpha\")\n```\n\n::: {.cell-output-display}\n![](2020-05-28-simulating-into-understanding-multilevel-models_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nIt seems that we've correctly caputred the mean of the population. Let's check the standard deviation of the distribution:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.frame(sigma = posterior_samples$sigma) %>% \n  ggplot(aes(sigma)) +\n  geom_histogram(binwidth = 0.01, color = \"black\", fill = \"dodgerblue4\", alpha = 0.7) +\n  geom_vline(aes(xintercept = 1.5), linetype = 2, color = \"red\") +\n  labs(title = \"Posterior samples for population s.d.\")\n```\n\n::: {.cell-output-display}\n![](2020-05-28-simulating-into-understanding-multilevel-models_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nOur estimates for the variation in the population could be better. Nevertheless, let's check our estimated probability of survival for each pond:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlogistic_own <- function(var) {\n  1/(1+exp(-var))\n}\n\nmatrix_estimated_probs <- logistic_own(posterior_samples$a_classroom)\n\nglimpse(matrix_estimated_probs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n num [1:2000, 1:60] 0.949 0.886 0.956 0.994 0.763 ...\n```\n:::\n:::\n\n\nWe have a matrix of 2000 rows (2000 simulations) and 60 columns (60 different ponds). Let's take the average across samples. This will be our estimated probability for each classroom:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npartial_pooling_estimates <- apply(matrix_estimated_probs, 2, mean)\ndata.frame(estimated_probability_partial_pooling = partial_pooling_estimates) %>% \n  cbind(data_simulation) -> data_simulation\nglimpse(data_simulation)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 60\nColumns: 6\n$ estimated_probability_partial_pooling <dbl> 0.9116976, 0.9089778, 0.7913792,…\n$ classroom                             <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1…\n$ Ni                                    <int> 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,…\n$ true_log_odds                         <dbl> 2.3245048, 0.2375944, 1.5494969,…\n$ number_passed_test                    <int> 5, 5, 4, 5, 1, 4, 5, 5, 5, 1, 5,…\n$ estimated_probability_no_pooling      <dbl> 1.0, 1.0, 0.8, 1.0, 0.2, 0.8, 1.…\n```\n:::\n:::\n\n\nThen, we must convert our true log-odds into true probabilities:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_simulation %>% \n  mutate(true_probabilities = inv_logit(true_log_odds)) -> data_simulation\nglimpse(data_simulation)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 60\nColumns: 7\n$ estimated_probability_partial_pooling <dbl> 0.9116976, 0.9089778, 0.7913792,…\n$ classroom                             <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1…\n$ Ni                                    <int> 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,…\n$ true_log_odds                         <dbl> 2.3245048, 0.2375944, 1.5494969,…\n$ number_passed_test                    <int> 5, 5, 4, 5, 1, 4, 5, 5, 5, 1, 5,…\n$ estimated_probability_no_pooling      <dbl> 1.0, 1.0, 0.8, 1.0, 0.2, 0.8, 1.…\n$ true_probabilities                    <dbl> 0.9108863, 0.5591207, 0.8248411,…\n```\n:::\n:::\n\n\n## Visualizing Pooling and Shrinkage\n\nRemember that pooling means sharing the information across classrooms. This is done by explicitly modeling the distribution of the average log odds of passing the exam across classrooms. That is, our estimated mean for the distribution of intercepts for each classroom will inform each of our predictions. Let's calculate this estimated global mean across classrooms: \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.frame(alpha_bar = posterior_samples$a_bar) %>% \n  mutate(alpha_bar = inv_logit(alpha_bar)) %>% \n  summarise(mean(alpha_bar)) -> estimated_global_mean\nestimated_global_mean <- estimated_global_mean[1,1]\nglue::glue(\"The estimated global mean is: {round(estimated_global_mean, 2)}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe estimated global mean is: 0.81\n```\n:::\n:::\n\n\nNow let's plot how our classroom estimates relate to the estimated global mean:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_simulation %>% \n  select(classroom, estimated_probability_partial_pooling, estimated_probability_no_pooling, Ni) %>% \n  pivot_longer(-c(classroom, Ni), names_to = \"method\", values_to = \"estimated_probability\") %>% \n  mutate(Ni = glue::glue(\"Sample size in classrooms: {Ni}\"),\n         Ni = factor(Ni, levels = c(\"Sample size in classrooms: 5\",\n                                    \"Sample size in classrooms: 10\",\n                                    \"Sample size in classrooms: 25\",\n                                    \"Sample size in classrooms: 35\"))) %>% \n  ggplot(aes(classroom, estimated_probability, color = method)) +\n  geom_point(alpha = 0.6) +\n  geom_hline(aes(yintercept = estimated_global_mean), linetype = 2, color = \"red\") +\n  facet_wrap(~Ni, scales = \"free\") +\n  scale_color_viridis_d() +\n  scale_y_continuous(labels = scales::percent) +\n  theme(legend.position = \"bottom\") +\n  labs(title = \"Visualizing pooling and Shrinking in a Multilevel Model\",\n       subtitle = \"Global estimated mean informs predictions for each classroom. Estimates are shrunk toward the global estimated mean\",\n       caption = \"Global estimated mean shown in red.\")\n```\n\n::: {.cell-output-display}\n![](2020-05-28-simulating-into-understanding-multilevel-models_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\nNow we can see that, **with partial pooling, our estimates are informed by the estimated global mean. Therefore, we shrink whatever proportion we calculate for the specific classroom towards this overall mean.** This can be seen by zooming in on the yellow points, the estimates from partial pooling, and noticing that they are always closer to the red line than the purple points (i.e., the sample classroom proportion). Notice that pooling results in more aggressive shrinkage for the classrooms where we have fewer data. As we will see, these classrooms' predictions are exactly the ones that need to be shrunk the most. \n\n## Visualizing the Benefits of Pooling and Shrinkage\n\nFinally, we can compare how well the different models did:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_simulation %>% \n  mutate(no_pooling_error = abs(estimated_probability_no_pooling - true_probabilities),\n         partial_pooling_error = abs(estimated_probability_partial_pooling - true_probabilities)) %>% \n  select(classroom, no_pooling_error, partial_pooling_error, Ni) %>% \n  pivot_longer(-c(classroom, Ni), names_to = \"method\", values_to = \"error\") %>% \n  mutate(Ni = glue::glue(\"Sample size in classrooms: {Ni}\"),\n         Ni = factor(Ni, levels = c(\"Sample size in classrooms: 5\",\n                                    \"Sample size in classrooms: 10\",\n                                    \"Sample size in classrooms: 25\",\n                                    \"Sample size in classrooms: 35\"))) %>% \n  ggplot(aes(error, factor(classroom), color = method)) +\n    geom_point(alpha = 0.6) +\n    scale_color_viridis_d() +\n    facet_wrap(~Ni, scales = \"free_y\") +\n    hrbrthemes::theme_ipsum_rc(grid = \"Y\") +\n    theme(legend.position = \"bottom\") +\n    labs(title = \"Partial Pooling vs No-pooling: Benefits of shrinkage\",\n         subtitle = \"Partial Pooling shines with low sample sizes and outliers\",\n         y = \"classroom\")\n```\n\n::: {.cell-output-display}\n![](2020-05-28-simulating-into-understanding-multilevel-models_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\nThis plot shows the prediction errors (comparing our estimated probability to the true probability) across classrooms. Therefore, lower values are better. Nota bene:\n\n1. Partial pooling results into shrinkage. **This is most helpful for the classrooms where we have relatively fewer data** (i.e., classrooms with sample size of 5 and 10). For these clasrooms, we complement the little data that we have with the information pooled from larger classrooms: that is, we shrink our estimates to the population mean that we've estimated. Whereas the model with no pooling just uses the information in the low sample ponds, resulting in overfitting that shows itself in the plot in the form of large prediction errors. The comparison between the two methods shows us how shrinkage helps us to reduce overfitting and thus predict better out of sample. \n\n2. The amount of shrinkage depends on the amount of data available. When we have fewer data, we shrink a lot. **When we have lots of data, we shrink a lot less**. Therefore, we can see that, for the classrooms that have lots of data (i.e., sample size of 35), partial pooling results in an almost identical prediction as the method with no pooling.  \n\n3. The model with no pooling can sometimes beat the model with partial pooling. However, on average, the model **with partial pooling performs much better**.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
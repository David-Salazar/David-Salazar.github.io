{
  "hash": "0c60c616c11bc3ef4ab12ad4154f8474",
  "result": {
    "markdown": "---\ntitle: Understanding Pooling across Intercepts and Slopes\nauthor: ''\ndate: '2020-06-01'\nslug: understanding-pooling-across-intercepts-and-slopes\ncategories: []\ntags: []\n---\n\n\n\n\n\n[Statistical Rethinking](https://xcelab.net/rm/statistical-rethinking/) is a fabulous course on Bayesian Statistics (and much more). By following simulations in the book, I recently tried to understand why [pooling is the process and shrinkage is the result](https://david-salazar.github.io/2020/05/28/simulating-into-understanding-multilevel-models/). In this post, I'll try to do the same for a model where we pool across intercepts and slopes. That is, we will posit a multivariate common distribution for both intercept and slopes to impose adaptive regularization on our predictions. \n\n# The model \n\nIn the book, Richard proposes the following model for the morning and afternoon waiting times at different cafés. \n\n$$ W_i \\sim Normal(\\mu, \\sigma) $$\n\n$$ \\mu_i = \\alpha_{ café_{[i]} } + \\beta_{ café_{[i]} } A_i $$\nIntuitively, we expect the waiting time at mornings to be longer than the afternoon waiting times. Therefore, we expect a negative $\\beta$. However, the interesting part is **that each café gets its own pair of parameters.** That is what multilevel models are, after all:\n\n> [Multilevel models] are massive interaction machines. They allow every unit in the data to have its own unique response to any treatment... while also improving estimates via pooling. \n\nThat is, each café has its own average waiting time and slope for the afternoon ($A_i$). *We could, after all, perform pooling independently: we would model one common distribution for the intercepts and one common distribution for the slopes*. Note, however, that it would imply that knowing the intercept does not help us to predict the slope. A strong assumption that, in this case, it's wrong: if a café has no lines neither in the morning, it won't have lines in the afternoon: knowing the average waiting time in the morning(the intercept) adjusts our expectations for the waiting time in the afternoon (slope). **There's information that can and should be pooled across parameter types. Therefore, we are better off by setting up a joint common distribution for both the intercepts and slopes**, which means modeling their covariance. \n\n$$ \\begin{bmatrix}\n           \\alpha_{café_j} \\\\\n           \\beta_{cafe_j}\n         \\end{bmatrix}  =  MVNormal ( \\begin{bmatrix}\n           \\alpha \\\\\n           \\beta\n         \\end{bmatrix} , S)$$\n\nWhere $S$ will be the var-cov matrix for the joint common distribution of intercepts and slopes. Intuitively, if the absolute value of the covariance is large, shrinking in one dimension (intercept) will lead to shrinking in the other dimension (slope).  \n\n# Simulating the dataset\n\n## The joint distribution\n\nRemember that \"priors are not ontology, but epistemology\". Therefore, we never include the priors on our simulations. Let's begin by setting up the parameters of the common joint distribution of intercepts and slopes.\n\n\n::: {.cell}\n\n:::\n\n\nWe then construct the var-cov matrix:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n      [,1]  [,2]\n[1,]  1.00 -0.35\n[2,] -0.35  0.25\n```\n:::\n:::\n\n\n## Simulate for each cafe\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n num [1:20, 1:2] 4.22 2.01 4.57 3.34 1.7 ...\n - attr(*, \"dimnames\")=List of 2\n  ..$ : NULL\n  ..$ : NULL\n```\n:::\n:::\n\n\nThat is, for each of the cafés we have one intercept and one slope. Let's check how our simulated intercepts and slopes fit in the overall joint distribution:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](2020-06-01-understanding-pooling-across-intercepts-and-slopes_files/figure-html/unnamed-chunk-5-1.png){width=768}\n:::\n:::\n\n\nThe points that lie in the farthest ellipses are the \"outliers\". Note that most of the samples surround the center of the distribution. \n\n## Simulate observations\n\nOnce we have an $\\alpha, \\beta$ for each café, we can simulate the waiting times for each of them:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 2\n# Groups:   cafe_ids [20]\n   cafe_ids     n\n      <int> <int>\n 1        1     6\n 2        2    10\n 3        3    16\n 4        4    20\n 5        5     6\n 6        6    10\n 7        7    16\n 8        8    20\n 9        9     6\n10       10    10\n11       11    16\n12       12    20\n13       13     6\n14       14    10\n15       15    16\n16       16    20\n17       17     6\n18       18    10\n19       19    16\n20       20    20\n```\n:::\n:::\n\nNow, we are ready to simulate:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nRows: 260\nColumns: 3\nRowwise: cafe_ids\n$ cafe_ids  <int> 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, …\n$ afternoon <int> 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, …\n$ wait      <dbl> 3.9678929, 3.8571978, 4.7278755, 2.7610133, 4.1194827, 3.543…\n```\n:::\n:::\n\n\nIn Richard's words:\n\n> Exactly the sort of data that is well-suited to a varying slopes model. There are multiple clusters in the data. These are the cafés. And each cluster is observed under differened conditions. So it's possible to estimate both an individual intercept for each cluster, as well as an individua slope. \n\n## Fixed effects: Maximal Overfit\n\n**When we do not allow any pooling at all, we maximally overfit**. The prediction for both afternoon and morning, for each café, will be the observed mean at each of the times. \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](2020-06-01-understanding-pooling-across-intercepts-and-slopes_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## Partial Pooling: Multilevel model\n\nInstead of ignoring the rest of the cafes when doing our predictions, let's pool the information across cafes and across parameter types. To do so, let's finish setting up the model that we had at the beginning:\n\n$$ W_i \\sim Normal(\\mu, \\sigma) $$\n\n$$ \\mu_i = \\alpha_{ café_{[i]} } + \\beta_{ café_{[i]} } A_i $$\n\n$$ \\begin{bmatrix}\n           \\alpha_{café_j} \\\\\n           \\beta_{cafe_j}\n         \\end{bmatrix}  =  MVNormal ( \\begin{bmatrix}\n           \\alpha \\\\\n           \\beta\n         \\end{bmatrix} , S)$$\n\nThe only thing left is to posit priors for the parameters. First, we write the var-cov matrix thus:\n\n$$ S = \\begin{bmatrix} \n  \\sigma_{\\alpha} \\  0 \\\\\n  0 \\ \\sigma_{\\beta}\n\\end{bmatrix} R \\begin{bmatrix} \n  \\sigma_{\\alpha} \\  0 \\\\\n  0 \\ \\sigma_{\\beta}\n\\end{bmatrix} $$\n\nWe do this to set up the prior for the correlation matrix thus:\n\n$$ R \\sim \\text{LKJcorr}(2) $$\n\nThe rest will be traditional priors. Let's focus for a second on the LKJcorr.\n\n### LKJcorr interlude\n\nFor our purposes, what we need to do is to understand how our prior changes with the parameter of the distribution $\\eta$:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n:::\n\n\n### Fit the model\n\nFinally, we are ready to fit our partial pooling model.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 parallel chains, with 1 thread(s) per chain...\n\nChain 1 Iteration:    1 / 10000 [  0%]  (Warmup) \nChain 1 Iteration:  100 / 10000 [  1%]  (Warmup) \nChain 2 Iteration:    1 / 10000 [  0%]  (Warmup) \nChain 2 Iteration:  100 / 10000 [  1%]  (Warmup) \nChain 3 Iteration:    1 / 10000 [  0%]  (Warmup) \nChain 3 Iteration:  100 / 10000 [  1%]  (Warmup) \nChain 4 Iteration:    1 / 10000 [  0%]  (Warmup) \nChain 4 Iteration:  100 / 10000 [  1%]  (Warmup) \nChain 1 Iteration:  200 / 10000 [  2%]  (Warmup) \nChain 1 Iteration:  300 / 10000 [  3%]  (Warmup) \nChain 2 Iteration:  200 / 10000 [  2%]  (Warmup) \nChain 2 Iteration:  300 / 10000 [  3%]  (Warmup) \nChain 3 Iteration:  200 / 10000 [  2%]  (Warmup) \nChain 3 Iteration:  300 / 10000 [  3%]  (Warmup) \nChain 4 Iteration:  200 / 10000 [  2%]  (Warmup) \nChain 4 Iteration:  300 / 10000 [  3%]  (Warmup) \nChain 1 Iteration:  400 / 10000 [  4%]  (Warmup) \nChain 2 Iteration:  400 / 10000 [  4%]  (Warmup) \nChain 1 Iteration:  500 / 10000 [  5%]  (Warmup) \nChain 2 Iteration:  500 / 10000 [  5%]  (Warmup) \nChain 3 Iteration:  400 / 10000 [  4%]  (Warmup) \nChain 3 Iteration:  500 / 10000 [  5%]  (Warmup) \nChain 4 Iteration:  400 / 10000 [  4%]  (Warmup) \nChain 4 Iteration:  500 / 10000 [  5%]  (Warmup) \nChain 1 Iteration:  600 / 10000 [  6%]  (Warmup) \nChain 1 Iteration:  700 / 10000 [  7%]  (Warmup) \nChain 2 Iteration:  600 / 10000 [  6%]  (Warmup) \nChain 3 Iteration:  600 / 10000 [  6%]  (Warmup) \nChain 4 Iteration:  600 / 10000 [  6%]  (Warmup) \nChain 1 Iteration:  800 / 10000 [  8%]  (Warmup) \nChain 2 Iteration:  700 / 10000 [  7%]  (Warmup) \nChain 2 Iteration:  800 / 10000 [  8%]  (Warmup) \nChain 3 Iteration:  700 / 10000 [  7%]  (Warmup) \nChain 3 Iteration:  800 / 10000 [  8%]  (Warmup) \nChain 4 Iteration:  700 / 10000 [  7%]  (Warmup) \nChain 1 Iteration:  900 / 10000 [  9%]  (Warmup) \nChain 2 Iteration:  900 / 10000 [  9%]  (Warmup) \nChain 3 Iteration:  900 / 10000 [  9%]  (Warmup) \nChain 4 Iteration:  800 / 10000 [  8%]  (Warmup) \nChain 1 Iteration: 1000 / 10000 [ 10%]  (Warmup) \nChain 1 Iteration: 1100 / 10000 [ 11%]  (Warmup) \nChain 2 Iteration: 1000 / 10000 [ 10%]  (Warmup) \nChain 3 Iteration: 1000 / 10000 [ 10%]  (Warmup) \nChain 4 Iteration:  900 / 10000 [  9%]  (Warmup) \nChain 4 Iteration: 1000 / 10000 [ 10%]  (Warmup) \nChain 1 Iteration: 1200 / 10000 [ 12%]  (Warmup) \nChain 2 Iteration: 1100 / 10000 [ 11%]  (Warmup) \nChain 3 Iteration: 1100 / 10000 [ 11%]  (Warmup) \nChain 3 Iteration: 1200 / 10000 [ 12%]  (Warmup) \nChain 4 Iteration: 1100 / 10000 [ 11%]  (Warmup) \nChain 1 Iteration: 1300 / 10000 [ 13%]  (Warmup) \nChain 2 Iteration: 1200 / 10000 [ 12%]  (Warmup) \nChain 2 Iteration: 1300 / 10000 [ 13%]  (Warmup) \nChain 3 Iteration: 1300 / 10000 [ 13%]  (Warmup) \nChain 4 Iteration: 1200 / 10000 [ 12%]  (Warmup) \nChain 1 Iteration: 1400 / 10000 [ 14%]  (Warmup) \nChain 1 Iteration: 1500 / 10000 [ 15%]  (Warmup) \nChain 2 Iteration: 1400 / 10000 [ 14%]  (Warmup) \nChain 3 Iteration: 1400 / 10000 [ 14%]  (Warmup) \nChain 4 Iteration: 1300 / 10000 [ 13%]  (Warmup) \nChain 4 Iteration: 1400 / 10000 [ 14%]  (Warmup) \nChain 1 Iteration: 1600 / 10000 [ 16%]  (Warmup) \nChain 2 Iteration: 1500 / 10000 [ 15%]  (Warmup) \nChain 2 Iteration: 1600 / 10000 [ 16%]  (Warmup) \nChain 3 Iteration: 1500 / 10000 [ 15%]  (Warmup) \nChain 3 Iteration: 1600 / 10000 [ 16%]  (Warmup) \nChain 4 Iteration: 1500 / 10000 [ 15%]  (Warmup) \nChain 1 Iteration: 1700 / 10000 [ 17%]  (Warmup) \nChain 1 Iteration: 1800 / 10000 [ 18%]  (Warmup) \nChain 2 Iteration: 1700 / 10000 [ 17%]  (Warmup) \nChain 3 Iteration: 1700 / 10000 [ 17%]  (Warmup) \nChain 4 Iteration: 1600 / 10000 [ 16%]  (Warmup) \nChain 1 Iteration: 1900 / 10000 [ 19%]  (Warmup) \nChain 2 Iteration: 1800 / 10000 [ 18%]  (Warmup) \nChain 3 Iteration: 1800 / 10000 [ 18%]  (Warmup) \nChain 4 Iteration: 1700 / 10000 [ 17%]  (Warmup) \nChain 4 Iteration: 1800 / 10000 [ 18%]  (Warmup) \nChain 1 Iteration: 2000 / 10000 [ 20%]  (Warmup) \nChain 2 Iteration: 1900 / 10000 [ 19%]  (Warmup) \nChain 3 Iteration: 1900 / 10000 [ 19%]  (Warmup) \nChain 4 Iteration: 1900 / 10000 [ 19%]  (Warmup) \nChain 1 Iteration: 2100 / 10000 [ 21%]  (Warmup) \nChain 2 Iteration: 2000 / 10000 [ 20%]  (Warmup) \nChain 3 Iteration: 2000 / 10000 [ 20%]  (Warmup) \nChain 3 Iteration: 2100 / 10000 [ 21%]  (Warmup) \nChain 4 Iteration: 2000 / 10000 [ 20%]  (Warmup) \nChain 1 Iteration: 2200 / 10000 [ 22%]  (Warmup) \nChain 1 Iteration: 2300 / 10000 [ 23%]  (Warmup) \nChain 2 Iteration: 2100 / 10000 [ 21%]  (Warmup) \nChain 2 Iteration: 2200 / 10000 [ 22%]  (Warmup) \nChain 3 Iteration: 2200 / 10000 [ 22%]  (Warmup) \nChain 4 Iteration: 2100 / 10000 [ 21%]  (Warmup) \nChain 4 Iteration: 2200 / 10000 [ 22%]  (Warmup) \nChain 1 Iteration: 2400 / 10000 [ 24%]  (Warmup) \nChain 2 Iteration: 2300 / 10000 [ 23%]  (Warmup) \nChain 3 Iteration: 2300 / 10000 [ 23%]  (Warmup) \nChain 4 Iteration: 2300 / 10000 [ 23%]  (Warmup) \nChain 1 Iteration: 2500 / 10000 [ 25%]  (Warmup) \nChain 2 Iteration: 2400 / 10000 [ 24%]  (Warmup) \nChain 3 Iteration: 2400 / 10000 [ 24%]  (Warmup) \nChain 4 Iteration: 2400 / 10000 [ 24%]  (Warmup) \nChain 1 Iteration: 2600 / 10000 [ 26%]  (Warmup) \nChain 1 Iteration: 2700 / 10000 [ 27%]  (Warmup) \nChain 2 Iteration: 2500 / 10000 [ 25%]  (Warmup) \nChain 3 Iteration: 2500 / 10000 [ 25%]  (Warmup) \nChain 4 Iteration: 2500 / 10000 [ 25%]  (Warmup) \nChain 4 Iteration: 2600 / 10000 [ 26%]  (Warmup) \nChain 1 Iteration: 2800 / 10000 [ 28%]  (Warmup) \nChain 2 Iteration: 2600 / 10000 [ 26%]  (Warmup) \nChain 2 Iteration: 2700 / 10000 [ 27%]  (Warmup) \nChain 3 Iteration: 2600 / 10000 [ 26%]  (Warmup) \nChain 4 Iteration: 2700 / 10000 [ 27%]  (Warmup) \nChain 1 Iteration: 2900 / 10000 [ 29%]  (Warmup) \nChain 2 Iteration: 2800 / 10000 [ 28%]  (Warmup) \nChain 3 Iteration: 2700 / 10000 [ 27%]  (Warmup) \nChain 3 Iteration: 2800 / 10000 [ 28%]  (Warmup) \nChain 4 Iteration: 2800 / 10000 [ 28%]  (Warmup) \nChain 1 Iteration: 3000 / 10000 [ 30%]  (Warmup) \nChain 2 Iteration: 2900 / 10000 [ 29%]  (Warmup) \nChain 3 Iteration: 2900 / 10000 [ 29%]  (Warmup) \nChain 4 Iteration: 2900 / 10000 [ 29%]  (Warmup) \nChain 4 Iteration: 3000 / 10000 [ 30%]  (Warmup) \nChain 1 Iteration: 3100 / 10000 [ 31%]  (Warmup) \nChain 1 Iteration: 3200 / 10000 [ 32%]  (Warmup) \nChain 2 Iteration: 3000 / 10000 [ 30%]  (Warmup) \nChain 2 Iteration: 3100 / 10000 [ 31%]  (Warmup) \nChain 3 Iteration: 3000 / 10000 [ 30%]  (Warmup) \nChain 3 Iteration: 3100 / 10000 [ 31%]  (Warmup) \nChain 4 Iteration: 3100 / 10000 [ 31%]  (Warmup) \nChain 1 Iteration: 3300 / 10000 [ 33%]  (Warmup) \nChain 2 Iteration: 3200 / 10000 [ 32%]  (Warmup) \nChain 3 Iteration: 3200 / 10000 [ 32%]  (Warmup) \nChain 4 Iteration: 3200 / 10000 [ 32%]  (Warmup) \nChain 4 Iteration: 3300 / 10000 [ 33%]  (Warmup) \nChain 1 Iteration: 3400 / 10000 [ 34%]  (Warmup) \nChain 1 Iteration: 3500 / 10000 [ 35%]  (Warmup) \nChain 2 Iteration: 3300 / 10000 [ 33%]  (Warmup) \nChain 2 Iteration: 3400 / 10000 [ 34%]  (Warmup) \nChain 3 Iteration: 3300 / 10000 [ 33%]  (Warmup) \nChain 3 Iteration: 3400 / 10000 [ 34%]  (Warmup) \nChain 4 Iteration: 3400 / 10000 [ 34%]  (Warmup) \nChain 1 Iteration: 3600 / 10000 [ 36%]  (Warmup) \nChain 2 Iteration: 3500 / 10000 [ 35%]  (Warmup) \nChain 3 Iteration: 3500 / 10000 [ 35%]  (Warmup) \nChain 4 Iteration: 3500 / 10000 [ 35%]  (Warmup) \nChain 1 Iteration: 3700 / 10000 [ 37%]  (Warmup) \nChain 2 Iteration: 3600 / 10000 [ 36%]  (Warmup) \nChain 3 Iteration: 3600 / 10000 [ 36%]  (Warmup) \nChain 4 Iteration: 3600 / 10000 [ 36%]  (Warmup) \nChain 1 Iteration: 3800 / 10000 [ 38%]  (Warmup) \nChain 1 Iteration: 3900 / 10000 [ 39%]  (Warmup) \nChain 2 Iteration: 3700 / 10000 [ 37%]  (Warmup) \nChain 3 Iteration: 3700 / 10000 [ 37%]  (Warmup) \nChain 4 Iteration: 3700 / 10000 [ 37%]  (Warmup) \nChain 1 Iteration: 4000 / 10000 [ 40%]  (Warmup) \nChain 2 Iteration: 3800 / 10000 [ 38%]  (Warmup) \nChain 2 Iteration: 3900 / 10000 [ 39%]  (Warmup) \nChain 3 Iteration: 3800 / 10000 [ 38%]  (Warmup) \nChain 3 Iteration: 3900 / 10000 [ 39%]  (Warmup) \nChain 4 Iteration: 3800 / 10000 [ 38%]  (Warmup) \nChain 4 Iteration: 3900 / 10000 [ 39%]  (Warmup) \nChain 1 Iteration: 4100 / 10000 [ 41%]  (Warmup) \nChain 2 Iteration: 4000 / 10000 [ 40%]  (Warmup) \nChain 3 Iteration: 4000 / 10000 [ 40%]  (Warmup) \nChain 4 Iteration: 4000 / 10000 [ 40%]  (Warmup) \nChain 1 Iteration: 4200 / 10000 [ 42%]  (Warmup) \nChain 1 Iteration: 4300 / 10000 [ 43%]  (Warmup) \nChain 2 Iteration: 4100 / 10000 [ 41%]  (Warmup) \nChain 2 Iteration: 4200 / 10000 [ 42%]  (Warmup) \nChain 3 Iteration: 4100 / 10000 [ 41%]  (Warmup) \nChain 3 Iteration: 4200 / 10000 [ 42%]  (Warmup) \nChain 4 Iteration: 4100 / 10000 [ 41%]  (Warmup) \nChain 4 Iteration: 4200 / 10000 [ 42%]  (Warmup) \nChain 1 Iteration: 4400 / 10000 [ 44%]  (Warmup) \nChain 2 Iteration: 4300 / 10000 [ 43%]  (Warmup) \nChain 3 Iteration: 4300 / 10000 [ 43%]  (Warmup) \nChain 4 Iteration: 4300 / 10000 [ 43%]  (Warmup) \nChain 1 Iteration: 4500 / 10000 [ 45%]  (Warmup) \nChain 2 Iteration: 4400 / 10000 [ 44%]  (Warmup) \nChain 2 Iteration: 4500 / 10000 [ 45%]  (Warmup) \nChain 3 Iteration: 4400 / 10000 [ 44%]  (Warmup) \nChain 3 Iteration: 4500 / 10000 [ 45%]  (Warmup) \nChain 4 Iteration: 4400 / 10000 [ 44%]  (Warmup) \nChain 4 Iteration: 4500 / 10000 [ 45%]  (Warmup) \nChain 1 Iteration: 4600 / 10000 [ 46%]  (Warmup) \nChain 1 Iteration: 4700 / 10000 [ 47%]  (Warmup) \nChain 2 Iteration: 4600 / 10000 [ 46%]  (Warmup) \nChain 3 Iteration: 4600 / 10000 [ 46%]  (Warmup) \nChain 4 Iteration: 4600 / 10000 [ 46%]  (Warmup) \nChain 1 Iteration: 4800 / 10000 [ 48%]  (Warmup) \nChain 2 Iteration: 4700 / 10000 [ 47%]  (Warmup) \nChain 3 Iteration: 4700 / 10000 [ 47%]  (Warmup) \nChain 4 Iteration: 4700 / 10000 [ 47%]  (Warmup) \nChain 4 Iteration: 4800 / 10000 [ 48%]  (Warmup) \nChain 1 Iteration: 4900 / 10000 [ 49%]  (Warmup) \nChain 2 Iteration: 4800 / 10000 [ 48%]  (Warmup) \nChain 2 Iteration: 4900 / 10000 [ 49%]  (Warmup) \nChain 3 Iteration: 4800 / 10000 [ 48%]  (Warmup) \nChain 3 Iteration: 4900 / 10000 [ 49%]  (Warmup) \nChain 4 Iteration: 4900 / 10000 [ 49%]  (Warmup) \nChain 1 Iteration: 5000 / 10000 [ 50%]  (Warmup) \nChain 1 Iteration: 5001 / 10000 [ 50%]  (Sampling) \nChain 1 Iteration: 5100 / 10000 [ 51%]  (Sampling) \nChain 2 Iteration: 5000 / 10000 [ 50%]  (Warmup) \nChain 2 Iteration: 5001 / 10000 [ 50%]  (Sampling) \nChain 3 Iteration: 5000 / 10000 [ 50%]  (Warmup) \nChain 3 Iteration: 5001 / 10000 [ 50%]  (Sampling) \nChain 3 Iteration: 5100 / 10000 [ 51%]  (Sampling) \nChain 4 Iteration: 5000 / 10000 [ 50%]  (Warmup) \nChain 4 Iteration: 5001 / 10000 [ 50%]  (Sampling) \nChain 4 Iteration: 5100 / 10000 [ 51%]  (Sampling) \nChain 1 Iteration: 5200 / 10000 [ 52%]  (Sampling) \nChain 2 Iteration: 5100 / 10000 [ 51%]  (Sampling) \nChain 2 Iteration: 5200 / 10000 [ 52%]  (Sampling) \nChain 3 Iteration: 5200 / 10000 [ 52%]  (Sampling) \nChain 4 Iteration: 5200 / 10000 [ 52%]  (Sampling) \nChain 1 Iteration: 5300 / 10000 [ 53%]  (Sampling) \nChain 1 Iteration: 5400 / 10000 [ 54%]  (Sampling) \nChain 2 Iteration: 5300 / 10000 [ 53%]  (Sampling) \nChain 2 Iteration: 5400 / 10000 [ 54%]  (Sampling) \nChain 3 Iteration: 5300 / 10000 [ 53%]  (Sampling) \nChain 3 Iteration: 5400 / 10000 [ 54%]  (Sampling) \nChain 4 Iteration: 5300 / 10000 [ 53%]  (Sampling) \nChain 4 Iteration: 5400 / 10000 [ 54%]  (Sampling) \nChain 1 Iteration: 5500 / 10000 [ 55%]  (Sampling) \nChain 2 Iteration: 5500 / 10000 [ 55%]  (Sampling) \nChain 3 Iteration: 5500 / 10000 [ 55%]  (Sampling) \nChain 4 Iteration: 5500 / 10000 [ 55%]  (Sampling) \nChain 1 Iteration: 5600 / 10000 [ 56%]  (Sampling) \nChain 2 Iteration: 5600 / 10000 [ 56%]  (Sampling) \nChain 2 Iteration: 5700 / 10000 [ 57%]  (Sampling) \nChain 3 Iteration: 5600 / 10000 [ 56%]  (Sampling) \nChain 3 Iteration: 5700 / 10000 [ 57%]  (Sampling) \nChain 4 Iteration: 5600 / 10000 [ 56%]  (Sampling) \nChain 4 Iteration: 5700 / 10000 [ 57%]  (Sampling) \nChain 1 Iteration: 5700 / 10000 [ 57%]  (Sampling) \nChain 2 Iteration: 5800 / 10000 [ 58%]  (Sampling) \nChain 3 Iteration: 5800 / 10000 [ 58%]  (Sampling) \nChain 4 Iteration: 5800 / 10000 [ 58%]  (Sampling) \nChain 1 Iteration: 5800 / 10000 [ 58%]  (Sampling) \nChain 2 Iteration: 5900 / 10000 [ 59%]  (Sampling) \nChain 3 Iteration: 5900 / 10000 [ 59%]  (Sampling) \nChain 4 Iteration: 5900 / 10000 [ 59%]  (Sampling) \nChain 1 Iteration: 5900 / 10000 [ 59%]  (Sampling) \nChain 3 Iteration: 6000 / 10000 [ 60%]  (Sampling) \nChain 4 Iteration: 6000 / 10000 [ 60%]  (Sampling) \nChain 1 Iteration: 6000 / 10000 [ 60%]  (Sampling) \nChain 2 Iteration: 6000 / 10000 [ 60%]  (Sampling) \nChain 2 Iteration: 6100 / 10000 [ 61%]  (Sampling) \nChain 3 Iteration: 6100 / 10000 [ 61%]  (Sampling) \nChain 4 Iteration: 6100 / 10000 [ 61%]  (Sampling) \nChain 1 Iteration: 6100 / 10000 [ 61%]  (Sampling) \nChain 2 Iteration: 6200 / 10000 [ 62%]  (Sampling) \nChain 3 Iteration: 6200 / 10000 [ 62%]  (Sampling) \nChain 3 Iteration: 6300 / 10000 [ 63%]  (Sampling) \nChain 4 Iteration: 6200 / 10000 [ 62%]  (Sampling) \nChain 4 Iteration: 6300 / 10000 [ 63%]  (Sampling) \nChain 1 Iteration: 6200 / 10000 [ 62%]  (Sampling) \nChain 2 Iteration: 6300 / 10000 [ 63%]  (Sampling) \nChain 3 Iteration: 6400 / 10000 [ 64%]  (Sampling) \nChain 4 Iteration: 6400 / 10000 [ 64%]  (Sampling) \nChain 1 Iteration: 6300 / 10000 [ 63%]  (Sampling) \nChain 2 Iteration: 6400 / 10000 [ 64%]  (Sampling) \nChain 1 Iteration: 6400 / 10000 [ 64%]  (Sampling) \nChain 2 Iteration: 6500 / 10000 [ 65%]  (Sampling) \nChain 3 Iteration: 6500 / 10000 [ 65%]  (Sampling) \nChain 4 Iteration: 6500 / 10000 [ 65%]  (Sampling) \nChain 1 Iteration: 6500 / 10000 [ 65%]  (Sampling) \nChain 2 Iteration: 6600 / 10000 [ 66%]  (Sampling) \nChain 2 Iteration: 6700 / 10000 [ 67%]  (Sampling) \nChain 3 Iteration: 6600 / 10000 [ 66%]  (Sampling) \nChain 3 Iteration: 6700 / 10000 [ 67%]  (Sampling) \nChain 4 Iteration: 6600 / 10000 [ 66%]  (Sampling) \nChain 4 Iteration: 6700 / 10000 [ 67%]  (Sampling) \nChain 1 Iteration: 6600 / 10000 [ 66%]  (Sampling) \nChain 2 Iteration: 6800 / 10000 [ 68%]  (Sampling) \nChain 3 Iteration: 6800 / 10000 [ 68%]  (Sampling) \nChain 4 Iteration: 6800 / 10000 [ 68%]  (Sampling) \nChain 1 Iteration: 6700 / 10000 [ 67%]  (Sampling) \nChain 1 Iteration: 6800 / 10000 [ 68%]  (Sampling) \nChain 2 Iteration: 6900 / 10000 [ 69%]  (Sampling) \nChain 3 Iteration: 6900 / 10000 [ 69%]  (Sampling) \nChain 3 Iteration: 7000 / 10000 [ 70%]  (Sampling) \nChain 4 Iteration: 6900 / 10000 [ 69%]  (Sampling) \nChain 1 Iteration: 6900 / 10000 [ 69%]  (Sampling) \nChain 2 Iteration: 7000 / 10000 [ 70%]  (Sampling) \nChain 2 Iteration: 7100 / 10000 [ 71%]  (Sampling) \nChain 3 Iteration: 7100 / 10000 [ 71%]  (Sampling) \nChain 4 Iteration: 7000 / 10000 [ 70%]  (Sampling) \nChain 4 Iteration: 7100 / 10000 [ 71%]  (Sampling) \nChain 1 Iteration: 7000 / 10000 [ 70%]  (Sampling) \nChain 1 Iteration: 7100 / 10000 [ 71%]  (Sampling) \nChain 2 Iteration: 7200 / 10000 [ 72%]  (Sampling) \nChain 3 Iteration: 7200 / 10000 [ 72%]  (Sampling) \nChain 3 Iteration: 7300 / 10000 [ 73%]  (Sampling) \nChain 4 Iteration: 7200 / 10000 [ 72%]  (Sampling) \nChain 1 Iteration: 7200 / 10000 [ 72%]  (Sampling) \nChain 2 Iteration: 7300 / 10000 [ 73%]  (Sampling) \nChain 2 Iteration: 7400 / 10000 [ 74%]  (Sampling) \nChain 3 Iteration: 7400 / 10000 [ 74%]  (Sampling) \nChain 4 Iteration: 7300 / 10000 [ 73%]  (Sampling) \nChain 1 Iteration: 7300 / 10000 [ 73%]  (Sampling) \nChain 2 Iteration: 7500 / 10000 [ 75%]  (Sampling) \nChain 3 Iteration: 7500 / 10000 [ 75%]  (Sampling) \nChain 4 Iteration: 7400 / 10000 [ 74%]  (Sampling) \nChain 4 Iteration: 7500 / 10000 [ 75%]  (Sampling) \nChain 1 Iteration: 7400 / 10000 [ 74%]  (Sampling) \nChain 2 Iteration: 7600 / 10000 [ 76%]  (Sampling) \nChain 3 Iteration: 7600 / 10000 [ 76%]  (Sampling) \nChain 4 Iteration: 7600 / 10000 [ 76%]  (Sampling) \nChain 1 Iteration: 7500 / 10000 [ 75%]  (Sampling) \nChain 2 Iteration: 7700 / 10000 [ 77%]  (Sampling) \nChain 2 Iteration: 7800 / 10000 [ 78%]  (Sampling) \nChain 3 Iteration: 7700 / 10000 [ 77%]  (Sampling) \nChain 3 Iteration: 7800 / 10000 [ 78%]  (Sampling) \nChain 4 Iteration: 7700 / 10000 [ 77%]  (Sampling) \nChain 1 Iteration: 7600 / 10000 [ 76%]  (Sampling) \nChain 2 Iteration: 7900 / 10000 [ 79%]  (Sampling) \nChain 3 Iteration: 7900 / 10000 [ 79%]  (Sampling) \nChain 4 Iteration: 7800 / 10000 [ 78%]  (Sampling) \nChain 1 Iteration: 7700 / 10000 [ 77%]  (Sampling) \nChain 1 Iteration: 7800 / 10000 [ 78%]  (Sampling) \nChain 2 Iteration: 8000 / 10000 [ 80%]  (Sampling) \nChain 3 Iteration: 8000 / 10000 [ 80%]  (Sampling) \nChain 4 Iteration: 7900 / 10000 [ 79%]  (Sampling) \nChain 4 Iteration: 8000 / 10000 [ 80%]  (Sampling) \nChain 1 Iteration: 7900 / 10000 [ 79%]  (Sampling) \nChain 2 Iteration: 8100 / 10000 [ 81%]  (Sampling) \nChain 3 Iteration: 8100 / 10000 [ 81%]  (Sampling) \nChain 3 Iteration: 8200 / 10000 [ 82%]  (Sampling) \nChain 4 Iteration: 8100 / 10000 [ 81%]  (Sampling) \nChain 1 Iteration: 8000 / 10000 [ 80%]  (Sampling) \nChain 2 Iteration: 8200 / 10000 [ 82%]  (Sampling) \nChain 2 Iteration: 8300 / 10000 [ 83%]  (Sampling) \nChain 3 Iteration: 8300 / 10000 [ 83%]  (Sampling) \nChain 4 Iteration: 8200 / 10000 [ 82%]  (Sampling) \nChain 1 Iteration: 8100 / 10000 [ 81%]  (Sampling) \nChain 2 Iteration: 8400 / 10000 [ 84%]  (Sampling) \nChain 3 Iteration: 8400 / 10000 [ 84%]  (Sampling) \nChain 4 Iteration: 8300 / 10000 [ 83%]  (Sampling) \nChain 4 Iteration: 8400 / 10000 [ 84%]  (Sampling) \nChain 1 Iteration: 8200 / 10000 [ 82%]  (Sampling) \nChain 1 Iteration: 8300 / 10000 [ 83%]  (Sampling) \nChain 2 Iteration: 8500 / 10000 [ 85%]  (Sampling) \nChain 2 Iteration: 8600 / 10000 [ 86%]  (Sampling) \nChain 3 Iteration: 8500 / 10000 [ 85%]  (Sampling) \nChain 3 Iteration: 8600 / 10000 [ 86%]  (Sampling) \nChain 4 Iteration: 8500 / 10000 [ 85%]  (Sampling) \nChain 1 Iteration: 8400 / 10000 [ 84%]  (Sampling) \nChain 2 Iteration: 8700 / 10000 [ 87%]  (Sampling) \nChain 3 Iteration: 8700 / 10000 [ 87%]  (Sampling) \nChain 4 Iteration: 8600 / 10000 [ 86%]  (Sampling) \nChain 1 Iteration: 8500 / 10000 [ 85%]  (Sampling) \nChain 2 Iteration: 8800 / 10000 [ 88%]  (Sampling) \nChain 3 Iteration: 8800 / 10000 [ 88%]  (Sampling) \nChain 3 Iteration: 8900 / 10000 [ 89%]  (Sampling) \nChain 4 Iteration: 8700 / 10000 [ 87%]  (Sampling) \nChain 4 Iteration: 8800 / 10000 [ 88%]  (Sampling) \nChain 1 Iteration: 8600 / 10000 [ 86%]  (Sampling) \nChain 2 Iteration: 8900 / 10000 [ 89%]  (Sampling) \nChain 2 Iteration: 9000 / 10000 [ 90%]  (Sampling) \nChain 3 Iteration: 9000 / 10000 [ 90%]  (Sampling) \nChain 4 Iteration: 8900 / 10000 [ 89%]  (Sampling) \nChain 1 Iteration: 8700 / 10000 [ 87%]  (Sampling) \nChain 2 Iteration: 9100 / 10000 [ 91%]  (Sampling) \nChain 3 Iteration: 9100 / 10000 [ 91%]  (Sampling) \nChain 4 Iteration: 9000 / 10000 [ 90%]  (Sampling) \nChain 1 Iteration: 8800 / 10000 [ 88%]  (Sampling) \nChain 2 Iteration: 9200 / 10000 [ 92%]  (Sampling) \nChain 3 Iteration: 9200 / 10000 [ 92%]  (Sampling) \nChain 4 Iteration: 9100 / 10000 [ 91%]  (Sampling) \nChain 1 Iteration: 8900 / 10000 [ 89%]  (Sampling) \nChain 2 Iteration: 9300 / 10000 [ 93%]  (Sampling) \nChain 3 Iteration: 9300 / 10000 [ 93%]  (Sampling) \nChain 4 Iteration: 9200 / 10000 [ 92%]  (Sampling) \nChain 1 Iteration: 9000 / 10000 [ 90%]  (Sampling) \nChain 2 Iteration: 9400 / 10000 [ 94%]  (Sampling) \nChain 3 Iteration: 9400 / 10000 [ 94%]  (Sampling) \nChain 4 Iteration: 9300 / 10000 [ 93%]  (Sampling) \nChain 1 Iteration: 9100 / 10000 [ 91%]  (Sampling) \nChain 2 Iteration: 9500 / 10000 [ 95%]  (Sampling) \nChain 3 Iteration: 9500 / 10000 [ 95%]  (Sampling) \nChain 4 Iteration: 9400 / 10000 [ 94%]  (Sampling) \nChain 4 Iteration: 9500 / 10000 [ 95%]  (Sampling) \nChain 1 Iteration: 9200 / 10000 [ 92%]  (Sampling) \nChain 2 Iteration: 9600 / 10000 [ 96%]  (Sampling) \nChain 2 Iteration: 9700 / 10000 [ 97%]  (Sampling) \nChain 3 Iteration: 9600 / 10000 [ 96%]  (Sampling) \nChain 3 Iteration: 9700 / 10000 [ 97%]  (Sampling) \nChain 4 Iteration: 9600 / 10000 [ 96%]  (Sampling) \nChain 1 Iteration: 9300 / 10000 [ 93%]  (Sampling) \nChain 2 Iteration: 9800 / 10000 [ 98%]  (Sampling) \nChain 3 Iteration: 9800 / 10000 [ 98%]  (Sampling) \nChain 4 Iteration: 9700 / 10000 [ 97%]  (Sampling) \nChain 1 Iteration: 9400 / 10000 [ 94%]  (Sampling) \nChain 1 Iteration: 9500 / 10000 [ 95%]  (Sampling) \nChain 2 Iteration: 9900 / 10000 [ 99%]  (Sampling) \nChain 3 Iteration: 9900 / 10000 [ 99%]  (Sampling) \nChain 3 Iteration: 10000 / 10000 [100%]  (Sampling) \nChain 4 Iteration: 9800 / 10000 [ 98%]  (Sampling) \nChain 4 Iteration: 9900 / 10000 [ 99%]  (Sampling) \nChain 1 Iteration: 9600 / 10000 [ 96%]  (Sampling) \nChain 2 Iteration: 10000 / 10000 [100%]  (Sampling) \nChain 4 Iteration: 10000 / 10000 [100%]  (Sampling) \nChain 2 finished in 8.3 seconds.\nChain 3 finished in 8.3 seconds.\nChain 4 finished in 8.3 seconds.\nChain 1 Iteration: 9700 / 10000 [ 97%]  (Sampling) \nChain 1 Iteration: 9800 / 10000 [ 98%]  (Sampling) \nChain 1 Iteration: 9900 / 10000 [ 99%]  (Sampling) \nChain 1 Iteration: 10000 / 10000 [100%]  (Sampling) \nChain 1 finished in 8.7 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 8.4 seconds.\nTotal execution time: 8.8 seconds.\n```\n:::\n:::\n\n\nLet's check our chains' health:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](2020-06-01-understanding-pooling-across-intercepts-and-slopes_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](2020-06-01-understanding-pooling-across-intercepts-and-slopes_files/figure-html/unnamed-chunk-11-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](2020-06-01-understanding-pooling-across-intercepts-and-slopes_files/figure-html/unnamed-chunk-11-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](2020-06-01-understanding-pooling-across-intercepts-and-slopes_files/figure-html/unnamed-chunk-11-4.png){width=672}\n:::\n:::\n\n\nOur chains look healthy enough:\n\n1. They mix well\n1. They are stationary.\n1. Different chains converge to explore the same parameter space. \n\nLet's look at the $\\hat{R}$ values:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n     Rhat4       \n Min.   :0.9998  \n 1st Qu.:0.9999  \n Median :0.9999  \n Mean   :0.9999  \n 3rd Qu.:1.0000  \n Max.   :1.0001  \n```\n:::\n:::\n\n\nThe $\\hat{R}$ values look OK. Let's check our inferences for the joint common distribution:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n            mean         sd      5.5%      94.5%    n_eff     Rhat4\nsigma  0.4968487 0.02379535  0.460315  0.5360532 21274.46 0.9999182\na      3.6278289 0.22224191  3.272897  3.9801400 20564.28 1.0000185\nb     -1.0885792 0.14784582 -1.324067 -0.8492441 21529.59 0.9999577\n```\n:::\n:::\n\n\nIt seems that we've been able to recover the common joint distribution's parameters that adaptively regularizes our individual estimates for each café. For example, the marginal distribution of $a$:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](2020-06-01-understanding-pooling-across-intercepts-and-slopes_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nNow for the posterior marginal distribution of b:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](2020-06-01-understanding-pooling-across-intercepts-and-slopes_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nFinally, we can plot the joint distribution with contours:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](2020-06-01-understanding-pooling-across-intercepts-and-slopes_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nAs we can see, our joint common distribution captures the negative correlation between intercepts and slopes.\n\n### Visualizing the shrinkage\n\nWe've seen how and why it's sensible to pool information across clusters and across parameter types. We've estimated with our multilevel model the common joint distribution. Now it's time to visualize the shrinkage: **how our estimates are pulled towards the estimated joint common distribution toward its mean.**\n\nTo do, we must first average our estimates for each café over the posterior distribution. Then, we can compare with our fixed effects estimates from the beginning. \n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nRows: 40\nColumns: 4\n$ cafe_ids  <int> 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10…\n$ method    <chr> \"partial_pooling\", \"fixed\", \"partial_pooling\", \"fixed\", \"par…\n$ intercept <dbl> 4.263780, 4.271750, 1.991360, 1.902532, 4.565624, 4.666991, …\n$ slope     <dbl> -0.9559145, -0.8844626, -0.7982419, -0.7224460, -2.0983092, …\n```\n:::\n:::\n\nFinally, we can plot our points over our posterior joint common distribution to visualize how our estimates are pooled over towards the joint common distribution's mean:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](2020-06-01-understanding-pooling-across-intercepts-and-slopes_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\nAs we can see, the partial pooling estimates are always closer to the center of the distribution than the fixed effects estimates. **This is the direct result of pooling the information with a joint common distribution that shrinks our estimates towards the grand mean.** Not only that, **shrinking in one dimension entails shrinking in the other dimension**. This is the direct result of the pooling across parameter types.  \n\n\n\n\n",
    "supporting": [
      "2020-06-01-understanding-pooling-across-intercepts-and-slopes_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
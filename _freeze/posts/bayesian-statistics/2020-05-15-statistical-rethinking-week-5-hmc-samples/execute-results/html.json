{
  "hash": "323223c08f5d75285316e4da8b3569bf",
  "result": {
    "markdown": "---\ntitle: Statistical Rethinking Week 5 -> HMC samples\nauthor: David Salazar\ndate: '2020-05-15'\nslug: statistical-rethinking-week-5-hmc-samples\ncategories: []\ntags: []\n---\n\n\n\n\n# Statistical Rethinking: Week 5\n\nAfter a quick tour around interactions, this week was a quick introduction to MCMC samplers and how they are the engine that powers current Bayesian modelling. We looked at Metropolis, Gibbs and finally HMC. Not only HMC is more efficient, but it also let us know when it fails. Let's tackle the homework with these new tools:\n\n# Homework 5\n\n### Problem Week 1\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n            judge  n\n1 Daniele Meulder 20\n2  Francis Schott 20\n3    Jamal Rayyis 20\n4 Jean-M Cardebat 20\n5        John Foy 20\n6    Linda Murphy 20\n7 Olivier Gergaud 20\n8  Robert Hodgson 20\n9    Tyler Colman 20\n```\n:::\n:::\n\nWe have 9 judges and each of them gave 20 reviews. Let's check the scores\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](2020-05-15-statistical-rethinking-week-5-hmc-samples_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n0 should be a meaningful metric. As well as 1. Let's perform feature scaling on score:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](2020-05-15-statistical-rethinking-week-5-hmc-samples_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nLet's analyze our predictor variables: judge and wine\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n  judge.amer   n\n1          0  80\n2          1 100\n```\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n   wine n\n1    A1 9\n2    A2 9\n3    B1 9\n4    B2 9\n5    C1 9\n6    C2 9\n7    D1 9\n8    D2 9\n9    E1 9\n10   E2 9\n11   F1 9\n12   F2 9\n13   G1 9\n14   G2 9\n15   H1 9\n16   H2 9\n17   I1 9\n18   I2 9\n19   J1 9\n20   J2 9\n```\n:::\n:::\n\n\nLet's create an index variable:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n  judge judge.amer   n\n1     1          0  80\n2     2          1 100\n```\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n   wine_fct wine n\n1         1   A1 9\n2         2   A2 9\n3         3   B1 9\n4         4   B2 9\n5         5   C1 9\n6         6   C2 9\n7         7   D1 9\n8         8   D2 9\n9         9   E1 9\n10       10   E2 9\n11       11   F1 9\n12       12   F2 9\n13       13   G1 9\n14       14   G2 9\n15       15   H1 9\n16       16   H2 9\n17       17   I1 9\n18       18   I2 9\n19       19   J1 9\n20       20   J2 9\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n> Consider only variation among judges and wines\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 parallel chains, with 1 thread(s) per chain...\n\nChain 1 Iteration:   1 / 1000 [  0%]  (Warmup) \nChain 1 Iteration: 100 / 1000 [ 10%]  (Warmup) \nChain 1 Iteration: 200 / 1000 [ 20%]  (Warmup) \nChain 1 Iteration: 300 / 1000 [ 30%]  (Warmup) \nChain 1 Iteration: 400 / 1000 [ 40%]  (Warmup) \nChain 1 Iteration: 500 / 1000 [ 50%]  (Warmup) \nChain 1 Iteration: 501 / 1000 [ 50%]  (Sampling) \nChain 1 Iteration: 600 / 1000 [ 60%]  (Sampling) \nChain 1 Iteration: 700 / 1000 [ 70%]  (Sampling) \nChain 1 Iteration: 800 / 1000 [ 80%]  (Sampling) \nChain 2 Iteration:   1 / 1000 [  0%]  (Warmup) \nChain 2 Iteration: 100 / 1000 [ 10%]  (Warmup) \nChain 2 Iteration: 200 / 1000 [ 20%]  (Warmup) \nChain 2 Iteration: 300 / 1000 [ 30%]  (Warmup) \nChain 2 Iteration: 400 / 1000 [ 40%]  (Warmup) \nChain 2 Iteration: 500 / 1000 [ 50%]  (Warmup) \nChain 2 Iteration: 501 / 1000 [ 50%]  (Sampling) \nChain 2 Iteration: 600 / 1000 [ 60%]  (Sampling) \nChain 2 Iteration: 700 / 1000 [ 70%]  (Sampling) \nChain 2 Iteration: 800 / 1000 [ 80%]  (Sampling) \nChain 2 Iteration: 900 / 1000 [ 90%]  (Sampling) \nChain 2 Iteration: 1000 / 1000 [100%]  (Sampling) \nChain 3 Iteration:   1 / 1000 [  0%]  (Warmup) \nChain 3 Iteration: 100 / 1000 [ 10%]  (Warmup) \nChain 3 Iteration: 200 / 1000 [ 20%]  (Warmup) \nChain 3 Iteration: 300 / 1000 [ 30%]  (Warmup) \nChain 3 Iteration: 400 / 1000 [ 40%]  (Warmup) \nChain 3 Iteration: 500 / 1000 [ 50%]  (Warmup) \nChain 3 Iteration: 501 / 1000 [ 50%]  (Sampling) \nChain 3 Iteration: 600 / 1000 [ 60%]  (Sampling) \nChain 3 Iteration: 700 / 1000 [ 70%]  (Sampling) \nChain 3 Iteration: 800 / 1000 [ 80%]  (Sampling) \nChain 3 Iteration: 900 / 1000 [ 90%]  (Sampling) \nChain 3 Iteration: 1000 / 1000 [100%]  (Sampling) \nChain 4 Iteration:   1 / 1000 [  0%]  (Warmup) \nChain 4 Iteration: 100 / 1000 [ 10%]  (Warmup) \nChain 4 Iteration: 200 / 1000 [ 20%]  (Warmup) \nChain 4 Iteration: 300 / 1000 [ 30%]  (Warmup) \nChain 4 Iteration: 400 / 1000 [ 40%]  (Warmup) \nChain 4 Iteration: 500 / 1000 [ 50%]  (Warmup) \nChain 4 Iteration: 501 / 1000 [ 50%]  (Sampling) \nChain 4 Iteration: 600 / 1000 [ 60%]  (Sampling) \nChain 4 Iteration: 700 / 1000 [ 70%]  (Sampling) \nChain 4 Iteration: 800 / 1000 [ 80%]  (Sampling) \nChain 4 Iteration: 900 / 1000 [ 90%]  (Sampling) \nChain 4 Iteration: 1000 / 1000 [100%]  (Sampling) \nChain 1 Iteration: 900 / 1000 [ 90%]  (Sampling) \nChain 1 Iteration: 1000 / 1000 [100%]  (Sampling) \nChain 1 finished in 0.2 seconds.\nChain 2 finished in 0.2 seconds.\nChain 3 finished in 0.2 seconds.\nChain 4 finished in 0.2 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.2 seconds.\nTotal execution time: 0.4 seconds.\n```\n:::\n:::\n\n\nLet's check how the sampling of the posterior went:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](2020-05-15-statistical-rethinking-week-5-hmc-samples_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](2020-05-15-statistical-rethinking-week-5-hmc-samples_files/figure-html/unnamed-chunk-11-2.png){width=672}\n:::\n:::\n\n\nOur chains have all the characteristics of healthy chains:\n\n1. They are stationary.\n2. They mix well the the entire parameter space.\n3. They converge to explore the same parameter space across chains.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n           mean         sd       5.5%     94.5%    n_eff     Rhat4\nj[1]  0.1812679 0.04184097 0.11536425 0.2466991 2681.346 0.9985223\nj[2]  0.2837266 0.04060739 0.21792262 0.3494357 2899.418 1.0001070\nj[3]  0.2813452 0.04079548 0.21543446 0.3445295 2030.262 0.9990988\nj[4]  0.1266579 0.04195269 0.05924000 0.1945397 2379.647 0.9985487\nj[5]  0.4039546 0.04183995 0.33724045 0.4717385 2603.052 0.9984313\nj[6]  0.3365812 0.04205265 0.26763338 0.4031346 2840.250 0.9989044\nj[7]  0.2655935 0.04304167 0.19877817 0.3340447 2494.531 1.0002036\nj[8]  0.1027778 0.04143975 0.03733354 0.1692216 2595.286 0.9994269\nj[9]  0.1675230 0.04240294 0.09861235 0.2367892 2540.246 0.9985044\nw[1]  0.4068375 0.05576358 0.31675751 0.4962600 3606.090 0.9992622\nw[2]  0.4001387 0.05307854 0.31754251 0.4874240 3270.758 1.0001830\nw[3]  0.4294509 0.05501064 0.34096957 0.5193709 3839.314 0.9993493\nw[4]  0.4767516 0.05393619 0.39104134 0.5604556 2963.826 0.9988180\nw[5]  0.3625362 0.05507341 0.27333534 0.4511795 3170.747 0.9998158\nw[6]  0.3192989 0.05798840 0.22911316 0.4113976 4700.174 0.9987453\nw[7]  0.4324590 0.05396901 0.34503395 0.5191273 3180.325 1.0000889\nw[8]  0.4299744 0.05557086 0.34025961 0.5180390 3402.303 0.9987850\nw[9]  0.3966763 0.05431820 0.30998893 0.4810641 3682.290 0.9984534\nw[10] 0.4038158 0.05637373 0.31703852 0.4963275 3372.165 0.9988019\nw[11] 0.3807681 0.05667858 0.28855148 0.4698498 3777.542 0.9987768\nw[12] 0.3785841 0.05678800 0.28678797 0.4700092 3388.091 0.9987300\nw[13] 0.3657092 0.05677917 0.27569986 0.4570325 3358.784 0.9991056\nw[14] 0.3837913 0.05656656 0.29291662 0.4726256 3036.489 0.9984837\nw[15] 0.3461885 0.05485679 0.25859807 0.4339357 3575.390 0.9984682\nw[16] 0.3496063 0.05351562 0.26491040 0.4349948 3079.376 0.9987447\nw[17] 0.3571750 0.05774181 0.26448740 0.4515752 2918.020 0.9993020\nw[18] 0.2374186 0.05732765 0.14861334 0.3269997 4018.920 0.9991466\nw[19] 0.3554900 0.05523885 0.26811755 0.4450294 3130.919 0.9983058\nw[20] 0.4487768 0.05523754 0.35953171 0.5372723 3765.401 0.9982562\nsigma 0.1878011 0.01141724 0.17077951 0.2075262 3011.966 0.9994656\n```\n:::\n:::\n\n\nThe Rhat is ok for all the parameters. \n\nThe table is just not informative. Let's do some ggridges for both judges and wines.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](2020-05-15-statistical-rethinking-week-5-hmc-samples_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nIt seems that John Foy was, on average, according to our data and assumptions, gave the highest scores across wines. Whilst Robert Hodgson was the one who gave the least favorable scores. \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](2020-05-15-statistical-rethinking-week-5-hmc-samples_files/figure-html/figure1-1.png){width=960}\n:::\n:::\n\n\nIt seems that we expect, on average, wines B2 and J2 to be scored the highest across all judges. Whilst the lowest we expect it to be I2. \n\n> Now, consider three features of the wines and judges:\n\n1. flight\n1. wine.amer\n1. judge.amer\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n  flight flight_int  n\n1    red          1 90\n2  white          2 90\n```\n:::\n:::\n\n\nThere are equal number of wines\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n  wine.amer wine.amer_int   n\n1         0             1  72\n2         1             2 108\n```\n:::\n:::\n\n\nThere are more american wines.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n  judge.amer judge.amer_int   n\n1          0              1  80\n2          1              2 100\n```\n:::\n:::\n\n\nThere are more american judges' scores. \n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 parallel chains, with 1 thread(s) per chain...\n\nChain 1 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 1 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 1 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 1 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 1 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 2 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 2 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 2 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 2 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 3 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 3 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 3 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 3 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 3 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 4 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 4 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 4 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 4 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 4 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 1 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 1 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 1 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 1 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 2 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 2 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 2 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 2 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 3 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 3 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 3 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 3 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 4 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 4 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 4 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 1 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 1 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 1 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 2 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 2 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 3 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 3 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 4 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 4 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 4 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 1 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 1 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 1 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 2 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 2 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 2 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 3 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 3 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 3 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 4 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 4 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 4 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 1 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 1 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 1 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 2 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 2 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 2 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 2 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 3 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 3 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 3 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 4 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 4 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 1 finished in 0.6 seconds.\nChain 2 finished in 0.6 seconds.\nChain 3 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 3 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 4 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 3 finished in 0.6 seconds.\nChain 4 finished in 0.7 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.6 seconds.\nTotal execution time: 0.8 seconds.\n```\n:::\n\n::: {.cell-output-display}\n![](2020-05-15-statistical-rethinking-week-5-hmc-samples_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\nThese chains look healthy. They:\n\n1. Are stationary.\n2. Mix well.\n3. All chains converge.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n           mean         sd       5.5%     94.5%    n_eff     Rhat4\nf[1]  0.1964321 0.05921141 0.10264248 0.2932756 1929.489 1.0017991\nf[2]  0.1972408 0.05864249 0.10323917 0.2898972 1930.435 1.0015680\nwa[1] 0.2209778 0.06044152 0.12594084 0.3167652 1905.601 0.9995583\nwa[2] 0.1760510 0.06016986 0.08176468 0.2715712 1894.694 0.9998729\nja[1] 0.1751097 0.06005995 0.07914266 0.2699528 1761.885 1.0008554\nja[2] 0.2211422 0.06001029 0.12355457 0.3164412 1712.893 1.0004454\nsigma 0.2146800 0.01172746 0.19687684 0.2346205 2371.869 0.9998254\n```\n:::\n:::\n\n\nLet's visualize the differences between flights:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](2020-05-15-statistical-rethinking-week-5-hmc-samples_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\nOn expectation, there does not seem to be a difference between the red's score and the white's score. \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](2020-05-15-statistical-rethinking-week-5-hmc-samples_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\nAmerican judges, on average, tend to give higher scores. \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](2020-05-15-statistical-rethinking-week-5-hmc-samples_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\nNon-American wines tend to get higher scores on average. \n\n> Now consider two way intercations among the three features\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 parallel chains, with 1 thread(s) per chain...\n\nChain 1 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 1 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 2 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 3 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 3 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 4 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 4 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 1 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 2 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 3 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 4 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 1 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 2 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 3 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 4 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 1 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 2 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 3 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 3 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 4 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 1 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 2 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 3 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 4 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 4 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 1 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 1 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 2 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 3 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 4 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 1 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 2 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 3 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 4 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 2 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 3 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 4 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 1 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 1 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 1 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 2 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 3 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 3 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 4 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 1 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 2 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 3 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 4 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 2 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 3 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 4 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 1 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 2 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 4 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 1 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 2 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 3 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 1 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 1 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 2 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 3 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 4 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 1 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 2 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 3 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 4 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 1 finished in 1.9 seconds.\nChain 2 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 3 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 2 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 3 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 4 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 2 finished in 2.0 seconds.\nChain 3 finished in 2.0 seconds.\nChain 4 finished in 2.0 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 2.0 seconds.\nTotal execution time: 2.1 seconds.\n```\n:::\n\n::: {.cell-output-display}\n![](2020-05-15-statistical-rethinking-week-5-hmc-samples_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\nThese chains look healthy, i.e., they:\n\n1. They are stationary\n2. They mix well over the parameter space.\n3. Different chains converge to explore the same ridges of parameter space. \n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n             mean         sd        5.5%       94.5%    n_eff     Rhat4\na      0.35108556 0.04081151  0.28627780  0.41637738 1729.482 1.0000419\nw      0.15192587 0.04763595  0.07572766  0.23084453 1833.197 1.0002522\nj      0.26885958 0.04838545  0.19295458  0.34522238 1993.536 1.0001668\nf      0.17341672 0.05018627  0.09319243  0.25358759 2102.432 1.0013111\nwj    -0.16473790 0.05206359 -0.24481138 -0.08426990 2395.754 1.0006508\nwf    -0.06783489 0.05247324 -0.15139847  0.01594699 2271.637 1.0019762\njf    -0.13253690 0.05238871 -0.21463390 -0.04946512 2615.125 1.0007479\nsigma  0.22859152 0.01338763  0.20795889  0.24996585 2700.983 0.9999136\n```\n:::\n:::\n\n\nThe Rhat is ok for all the parameters. However, now that we have interactions, it is not easy nor intuitive to analyze parameters on their own scale. We must compare them on the outcome scale. Let's create predictions for all eight possible values\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 3\n     wa    ja flight\n  <dbl> <dbl>  <dbl>\n1     1     1      1\n2     1     1      0\n3     1     0      1\n4     1     0      0\n5     0     1      1\n6     0     1      0\n7     0     0      1\n8     0     0      0\n```\n:::\n:::\n\n\nThen, we can calculate our expected predictions for each of the cases:\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](2020-05-15-statistical-rethinking-week-5-hmc-samples_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\nWhites tend, on average, to be higher scored. Also, non American Judges tend to be harsher than their american counterparts, regardless of the origin of the wine. The worst rated wine, on average, are the red international wine. \n\n\n",
    "supporting": [
      "2020-05-15-statistical-rethinking-week-5-hmc-samples_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}